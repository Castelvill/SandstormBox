struct ChildStruct{
	bool finished;
	string ID;
};

class Trio{
public:
	string ID;
	vector <ConditionStruct> Conditions;
	vector <EventStruct> DependentEvents;
	vector <EventStruct> PostEvents;
	vector <ChildStruct> Children;
	string parentID;
	bool parentState;
	bool werePostEventsExecuted;
	void reset();
	void areAllConditionsFulfilled();
	void executeDependentEvents();
	void executePostEvents();
	bool allChildrenFinished();
};
void Trio::reset(){
	parentState = false;
	for(ChildStruct & Child : Children){
		Child.finished = false;
	}
	werePostEventsExecuted = false;
}
void Trio::checkConditions(){
	allConditionsFulfilled = false;
	...
}
void Trio::executePostEvents(){
	...
	werePostEventsExecuted = true;
}

Trio[0].parentState = true;
for(&T : Trio){
	T.reset();
}
for(int i=0; i < Trio.size(); i++){
	if(Trio[i].parentState == false){
		continue;
	}
	
	if(Trio[i].areAllConditionsFulfilled() == true){
		Trio[i].executeDependentEvents();
		for(T in Trio){
			if(T.parentID == Trio[i].ID){
				parentState = true;
			}
			for(ChildStruct & Child : T.Children){
				if(Child.ID == Trio[i].ID){
					Child.finished = true;
					break;
				}
			}
		}
		if(childrenStates.size() == 0){
			Trio[i].executePostEvents();
			for(&T : Trio){
				if(T.werePostEventsExecuted == false && T.parentState == true && allChildrenFinished()){
					T.executePostEvents();
				}
			}
		}
	}
	else{
		Trio[i].executePostEvents();
	}
	
}