RPN:
1. if symbol.back() == value:
	result.push_back(symbol.back())
2. elif symbol.back().type == op:
	while(symbol.back().priority <= stack.back().priority):
		result.push_back(stack.back());
		stack.pop_back();
	if(symbol.back() == "||"):
		result.push_back("igT");
	if(symbol.back() == "&&"):
		result.push_back("igF");
	stack.push_back(symbol.back());
3. elif symbol.back().type == "(":
	stack.push_back(symbol.back());
4. elif symbol.back().type == ")":
	while(stack.size() > 0 && stack.back() != "("):
		result.push_back(stack.back());
		stack.pop_back();
	if(stack.size() == 0):
		return ERROR
	stack.pop_back();
	if stack.back() == "!":
		result.push_back(stack.back())
		stack.pop_back();
5. symbol.pop_back();
6. if(symbol.size > 0):
	goto 1.;
7. end

3 !
2 ==, !=, <=, >=, <, >
1 && 
0 ||

Evaluate RPN:
for symbol in rpn:
if ignore_flag_or == true:
	if symbol == "||"
		ignore_flag_or = false;
	continue;
if ignore_flag_and == true:
	if symbol == "&&"
		ignore_flag_and = false;
	continue;
if symbol.type == value:
	stack.push_back(symbol);
elif symbol == "!":
	tmp = stack.back();
	stack.pop_back();
	stack.push_back(!tmp);
elif symbol.type == op: //bi-operand
	operand1 = stack.back();
	stack.pop_back();
	operand2 = stack.back();
	stack.pop_back();
	stack.push_back(operand2 symbol operand1);
elif symbol == "#" && stack.back() == true:
	ignore_flag_or = true;
elif symbol == "@" && stack.back() == false:
	ignore_flag_and = true;
