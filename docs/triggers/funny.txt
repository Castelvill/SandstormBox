fun funny(string something){
    print(something)
    funny(something);
}

let hehe = true;

if(hehe){
    funny("hello");
}
----------------------------
Goo Interpreter:
---------------------------
1 set hehe true
2 jmpne hehe 1 5
3 print "hello"
4 jmp 3
5 exit
-----------------------------


let n = me.var.n;
n = 10;
while(n > 0){
    print(f"Bananas: {n}\n");
    me.var.n--;
}
----------------------------
Goo Interpreter:
---------------------------
1 set me.var.n 10
2 jmple me.var.n 0 10
3 set _print ""
4 add _print "Bananas: "
5 add _print me.var.n
6 add _print "\n"
7 print _print
8 sub me.var.n 1
9 jmp 2
10 exit
-----------------------------

let bobs = all(group == "bob");
bobs.var.money += 2;

----------------------------
Goo Interpreter:
---------------------------
1 set i 0
2 jmpne objects[i].group "bob" 5
3 add objects[i].var.money 2
4 jmp 2
5 exit
-----------------------------

let money = all(group == "money");
let touched_money = all(me.collision_with(x));
me.var.money += touched_money.var.value;
touched_money.kill();

----------------------------
Goo Interpreter:
---------------------------
1 set i 0
2 jmpe i objects.size 10
3 jmpne objects[i].group "money" 8
4 jmpne objects[i].collision me 8
5 add me.var.money objects[i].var.value
6 kill objects[i]
7 jmp 2
8 add i 1
9 jmp 2
10 exit
-----------------------------

layers.clone(layers.second.patrick, layers.first.new_patrick);

----------------------------
Goo Interpreter:
---------------------------
int cloneObjectFromAnotherLayer(vector <LayerClass> & Layers, string fromLayerID, string fromObjectID, string toLayerID, string toObjectID){
    for(DestLayer in Layers){
        if(DestLayer.getID() != toLayerID)
            continue;
        for(SrcLayer in Layers){
            if(SrcLayer.getID() != fromLayerID)
                continue;
            for(OriginalObject in SrcLayer.objects){
                if(OriginalObject.getID() != fromObjectID)
                    continue;
                return cloneObject(OriginalObject, DestLayer, toObjectID);
            }
            return -3; //Original object {fromObjectID} not found.
        }
        return -2; //Source layer {fromLayerID} not found.
    }
    return -1; //Destination layer {toLayerID} not found.
}
int cloneObject(AncestorObject OriginalObject, LayerClass DestLayer, string cloneID){
    //If the same ID of an object is found, abort the operation - this function does not have permission to overwrite objects.
    for(DestObject in DestLayer.Objects){
        if(DestObject.getID() == cloneID){
            return -4; //Object {cloneID} already exists in layer {DestLayer}. In order to overwrite an object use forceCloneObject().
        }
    }
    return DestLayer.clone(OriginalObject, cloneID);
}
int LayerClass::clone(AncestorObject OriginalObject, string cloneID){
    Objects.push_back(AncestorObject(cloneID));
    Objects.back().clone(OriginalObject);
}
int forceCloneObject(AncestorObject OriginalObject, LayerClass DestLayer, string cloneID){
    //If the same ID of an object is found,  
    for(DestObject in DestLayer.Objects){
        if(DestObject.getID() == cloneID){
            return -4; //Object {cloneID} already exists in layer {DestLayer}. In order to overwrite an object use forceCloneObject().
        }
    }
    return DestLayer.clone(OriginalObject, cloneID);
}
-----------------------------


objects.bob.events.sleepy.run();

----------------------------
Goo Interpreter:
---------------------------
run objects.bob
-----------------------------