IDEAS
-Mowing the grass (isometric, grass particles, vehicle movement, rocks, speedruns)
-Hentai snek
-Fishing + survival simulator (isometric) with breeding fishes, exploring caves, surviving on frozen lake
-Mario
-Pacman
-Galaxian
-Asteroids


ANCESTOR OBJECT
Father Object class - an omni potential object which is inherited by every other object class. By changing its parameters and modules you can transform it into any object you desire. Inspired by Ltspice.

Original (not removable) parameters:
- id
- coordinates
- size

Modules:
- variables: ints, double, strings
- shape controller: make/edit/move vertices and edges; use rotation, scaling, mirror, stretch; generate a square, circle, triangle;
- image controller: choose parts of an image and draw them according to center of the Object;
- hitboxes: you can draw lines or set hitboxes by size;
- actions: connect this object to another object via an id address and choose an action that triggers the connected object into another action, for ex. into changing modular parameters (parameters added to an object) and original parameters (not removable) of this object


Engine
Engine can run created games in the same window as editor. You can make changes to the running game in real time. When you are saving the project, engine translates the structure of a game into EgmCode. When you are loading the game into the engine or into the Pocket Engine, the compilator translates EgmCode into data structure used to run the game.

When you boot the game, data is cloned to vectors and the program is operating on the clones.


Concept
-zbuduj super prosty silnik/edytor do gier i programów (może z bloczkami?), który pozwala robić proste gry i programy bardzo bardzo szybko
-dodaj możliwość pisania skryptów w c++ (kompilator tutaj potrzebny) lub w uproszczonej lub zjebanej wersji c++
-dodaj generowanie proceduralne
-dodaj suwaczki
-zrób program lub skrypt, który pomaga bardzo szybko zrobić prostą grafikę i animację do gier (wybieranie palety kolorów, sposobu generowania: losowy, fraktalny, wykorzystujący jakiś obrazek(wrzucasz obrazek, mówisz co chcesz z niego wyciągnąć i program to wyciąga, albo generuje z obrazka różne proste grafiki lub animacje))
-jest jeden edytor i może być kilka otwartych gier, gra nie może być zamknięta, gdy okno edytora jest aktywne







PLAN
1) Zrób program A, który tworzy specjalny plik z zasobami do nowego programu B na podstawie inputu użytkownika (specjalny nieczytelny dla człowieka kod, np: liczby oddzielone średnikami, ciągi znaków). Ten specjalny plik programu B jest "kompilowany" przez program A lub program C (program A pozbawiony edytora) i uruchamiany jest program B, działający tylko przy asyście naszego standardu.
2) Dodaj: proste obiekty z różnymi parametrami, tekst, przyciski.
3) Dodaj wzorce projektowe (każdy ma ograniczony interfejs i strukturę tak, aby można było robić wybraną grę
szybko i efektywnie, bez udziwnień):
-platformówka (poruszanine się w czterech kierunkach z grawitacją);
-tekstówka rpg (edytor tekstowy lub przyciski dialogowo-akcyjne)
-space shooter (ciągłe poruszanie się w górę lub w prawo, manewrowanie i strzelanie, zero fizyki);
-rpg (poruszanie się w czterech kierunkach bez grawitacji lub przy pomocy myszki, statyczne walki kilka postaci
na kilka postaci);
-strategia turowa (heros 3 albo king's bounty na antydepresantach) (poruszanie się myszką, walki turowe na szachownicy kwadratowej lub hexagonalnej);

6) kilka warstw (menu, settings, game loop)

x) zrób program A, który: umożliwia stworzenie aplikacji okienkowej B i wyeksportowanie jej do osobnego
pliku exe (Na początku program A ma przetwarzać input użytkownika na plik z kodem c++, który można
otworzyć w code blocks i przemienić w plik exe. Potem trzeba zautomatyzować ten proces.)





Platformer:
Edytor:
-dodaj nową mapę
-dodaj/usuń teksturę/animację do edytora
-dodaj/usuń nowy obiekt (nazwa, obiekt stały/wizualny/przeciwnik, warstwa (0 to gracza, ujemne to za graczem, dodatnie to przed graczem), tekstura/animacja, skala, rotacja, typ poruszania się (współrzędne), interakcja (modyfikacja zmiennej, dymek z informacją))
-edytuj obiekt
-edytuj gracza/graczy
-dodaj/usuń zmienną odpowiedzialną za statystyki (życie) i zbieranie przedmiotów
-wybierz warunek zakończenia mapy (brak, dojście do punktu, osiągnięcie wartości zmiennej)

Gra:
-wybór mapy
-odblokowywanie map

Space shooter
Edytor:
-dodaj/edytuj mapę, które będą się kopiować
-dodaj/edytuj statek (pojedyncze części, tekstury, typ ruchu)
-edytuj scenariusz (lista spawnowanych/usuwanych statków/meteorów/obiektów)
-dodaj/edytuj typ pocisku / ulepszenie
-wybierz warunek zakończenia mapy (brak, dojście do współrzędnej na jednej osi, pokonanie bossa, osiągnięcie wartości zmiennej)

Tekstówka:
Edytor:
-jedna mapa abstrakcyjna
-dodawanie lokacji jako bloczków
-dodawanie npc do lokacji
-edytowanie gracza i npc (dialogi, statystyki, lista z wyposażeniem, relacje)
-dodawanie interakcji z otoczeniem (podnoszenie przedmiotów, aktywacja zdarzenia)

