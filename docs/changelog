02.09.2024
-Added skipping of repeated commands in the command history.
-Converted instruction parameters to one-dimensional trees.

28.09.2024
-Implemented the autocomplete for file paths.
-Improved the "similar" instruction with an alternative output - the longest common substring.
-Added the "count" instruction.

27.09.2024
-Added error checks to the "find_by_id_2" instruction.
-Renamed EveModule to EventModule.
-Fixed: Newly created global variables were deleted from the context when retracing the event stack. 
-Fixed small memory leak: ALLEGRO_PATH pointer was never destroyed.

25.09.2024
-Added script paths and line numbers to error messages.
-Fixed event ordering by removing entity deletion in the middle of event execution (executeEvents()).
-Improved event debugging logs.

23.09.2024
-Renamed some attributes of "triggers", "if" and "access" instructions.
-In the "new" instruction changed the "new_ids" parameter type into "variable / vector variable / string / string vector".
-Fixed the backbuffer: it ruined the performance when a lot of text was present.
-Fixed: events could be activated with any trigger.

22.09.2024
-Added "reset" and "do_not_preserve" parameters to the instructions: build, load_build, build_subset, inject_code, inject_instr. 
-Renamed "power_off" to "exit".
-Created a simple interpreter and built-in scripts.
-Created the "console_input" instruction.
-Removed the automatic Allegro display creation and implemented the "create_display" instruction instead. 
-Rename attributes "window_w", "window_h" and "window_size" to "display_w", "display_h" and "display_size" in the "access" and "env" instructions.

21.09.2024
-Disabled CTRL+ESC shortcut and added it by hand to the examples and the terminal.
-Added command line arguments for the engine's binary.
-Made square brackets optional in the instructions: bool, int, double and string.
-Renamed "value" instruction to "access".
-Changed parentheses to square brackets inside the "value" instruction.
-Swapped the parameters: values and variable ids, in the instructions: value, var, vec, bool, int, double, string.

17.09.2024
-Add script examples.
-Rename "post" instruction to "after".
-Added basic program printing when no valid files are passed to the engine.

9.09.2024
-Updated types of parameters in the documentation.
-Removed useless variables from the scripts.
-Added literals to arithmetic instructions.
-Standardized error handling in the instructions.
-Updated the event assembler (jit compiler) with the new type of parameters.
-Replaced dynamicIDs and literals in operations with Parameter structure in order to allow mixing variables and literals together in the instructions.
-Restricted variables' names by not allowing strings that start with numbers and \". Remove the distinction between using context and literals in all instructions. Removeed all "zero", "True" and "False" variables from the scripts.
-Removed "bool", "int", "double" and "string" contexts from parameters.

26.08.2024
-Minimized "bind" instruction and create "rbind" instruction, which removes all binded scripts from the chosen objects.  

21.08.2024
-Changed 'rename' instruction to 'mv' and update it with context variables.

27.07.2024
-Created Makefile.

24.07.2024
-Added tests.
-Fixed Scrollbar module: Image pointers were not invalidated after using the "new" instruction.
-Minimized aggregation instructions.

17.07.2024
-Minimized "if" and "value" instructions by shortening the expressions.
-Minimized "print" instruction by removing "type" parameter from the variadic part.
-Updated documentation with a new "context" parameter type.
-Added "breakpoint" instruction for triggering a breakpoint inside a debugger.
-Minimized "index" instruction by removing "source" and "indexes_from_contexts" parameters.

12.07.2024
-Removed variable types from the "fun" instruction.
-Fixed minuses.

1.07.2024
-Minimized the scripting language with the type guessing (random_int, var, cd).
-Described "rename" instruction.

30.06.2024
-Created "save_to_file" and "load_from_file" functions for the EditableText to enable saving and loading formatted text.
-Scrollbars now dynamically adjust to the current window size.

29.06.2024
-Fixed: Cropping tabs at the ends of lines breaks the formatting.
-Fixed: When text is not wrapped, moving cursor down from the not fully visible line causes a shift to the left.
-Renamed "isPartOfInterface" variable to “isScrollable” in the PrimaryModule and adjust the rest of the engine to this change.
-Added "override" bool parameter to the "start" instruction. If "override" is true, the new event will override the event with the same id.
-Connected scrollbars to the cameras via the vector of ids.

20.06.2024
-Added "ENABLE_NOT_ASCII" command for the .config file.
-Improved automatic scrolling inside the text fields.
-Added automatic text cursor following to the scrollbar.
-Created "cursor_pos_x" and "cursor_pos_y" values that return the position of the cursor in the active text field. 

19.06.2024
-After overwriting the selected text with a new character, cursor is now moved one position to the right.
-Described "start", "end", "triggers", "if", "else", "post" and "new_proc" instructions in the documentation.
-Added "directory doesn't exist" message to "ls" command.
-Moved drawing scrollbars to the front of modules.

31.05.2024
-Refactor scripts.
-Updated neofetch.
-Renamed binary to "SandstormBox.exe".
-Added vectors to "print" instruction.

30.05.2024
-Upgraded "ls" command - now directories are printed first and in a different color.
-Upgraded "tokenize" instruction - now characters in quotation marks create a single token.
-Added "is_directory" value that returns true if a file is a directory.
-Fixed: Tabs were not ignored during the event assembly.
-Fixed: Rebooting in fullscreen does not refresh the window.

29.05.2024
-Added scrollbar with dynamic updates to the text editor.
-Fixed: Scrollbar's thumb was not updated until a certain terminal size was not achieved.
-Fixed: Cannot select scrolled text.
-Stopped drawing text lines that are outside the screen.

28.05.2024
-Thumb of the scrollbar can now be moved while the mouse is outside the engine's window.
-Fixed: Scrolling speed of the mouse wheel varies based on the size of the current history in the terminal.

27.05.2024
-Added minimal terminal height ("resizeTerminalIfSmall" event).

25.05.2024
-Added "is_selected" attribute to the camera module - only one camera can be directly selected at any time, while many cameras can be focused.
-Added focus propagation to the cameras - variable "isFocused" should be true if any children of the camera is focused.

18.05.2024
-Added a two-line prompt with the current directory.

6.05.2024
-Added scrollbar to the terminal - it's not perfect yet though.
-Fixed scrolling with the mouse scroll.
-Added "TrackImage" and "ThumbImage" pointers to the Scrollbar Module.
-Renamed functions "attach_to_camera" and "enable_interface" to "disable_scrolling".
-Renamed variable "isAttachedToCamera" to "isScrollable".

1.05.2024
-Implemented deleting whole words with the "ctrl" key.

30.04.2024
-Fixed: Right after executing the first "note" program, cannot select more than one letter in the text.
-Fixed: Clicking on the last line of a text and going down offsets the cursor and can cause a crash.
-Fixed: Moving cursor up with tabs present offsets the cursor.
-Fixed: Selecting text with the mouse doesn't update variables: localCursorPos, lineWithCursorIdx and lineWidthToCursor.

26.04.2024
-Fixed: Mouse cursor ignores tabs.
-Fixed: Clipboard and command history were saved to the working directory instead of the "root" directory.
-Fixed: Instructions after 'post' were always executed no matter the event conditions.
-Fixed: If there is more than one event with "on_init" trigger, following "on_init" events will be executed several times. Only one "on_init" trigger was erased during every engine iteration.
-Fixed: When event tries to run non-existent event, program enters endless loop.

25.04.2024
-Improved SuperEditableTextModule deactivation - now it stops the editing process and updates the module.
-Added optional script paths to the main function arguments - provided there scripts will be executed on engine's boot.

24.04.2024
-Added to .config: "EXECUTE script_path" command - on boot, engine will read all "EXECUTE" commands and execute all provided scripts, each in a new "process".

23.04.2024
-Created "forgor" command for the terminal - it clears the whole saved history from the current session and the save file.
-Implemented persistent command history to the terminal.
-Fixed problems with types in the vector module.

17.04.2024
-Enhanced error messages with IDs of layers, objects and events.

16.04.2024
-Fixed: Cannot select a part of the text with the mouse (mouse is detecting other object).
-Fixed "inject_format" function.

15.04.2024
-Implemented "inject_format" function for SuperEditableTextModule.

13.04.2024
-Added dynamic paths to "load_build" and "build_subset" instructions.

12.04.2024
-Fixed weird behavior of the cursors after pasting a text in SuperEditableTextModule.

10.04.2024
-Fixed: "set_can_edit_text" function of camera does not affect SuperEditableTextModule.
-Fixed jumping by words to the right while selecting text.

9.04.2024
-Implemented jumping by words in left-right movement of the SuperEditableTextModule.
-Added "canCopyFormat" variable to the SuperEditableTextModule.

8.04.2024
-Optimized text selection with mouse.
-Fixed: Tab autocomplete and "history" could remove the cursor in the terminal.
-Fixed: Creating two windows would crash the engine. The problem was caused by not recalculating the active SuperEditableTextModule.

5.04.2024
-Upgraded the terminal with the SuperEditableTextModule.
-Implemented all key functionalities of the SuperEditableTextModule.
-Implemented selecting text with a mouse.

4.04.2024
-Fixed vertical line padding.
-Removed temporary debug info and divided moveCursorUp() and moveCursorDown() into smaller functions.
-Fixed: Filling a line to the full can cause offsets and crashes.
-Fixed: If there is more than one tab on the start of the text field, cursor is offseted.
-Fixed: If a tab is wrapped, moving to its line crashes the engine.

3.04.2024
-Test custom tab lengths.
-Fixed edge cases in the last line of the text field.
-Added automatic update of the last format with the previous format if something was pasted to the end of the text field or the last format was deleted.
-Fixed: If the line is full and ends with a new line, down arrow offsets the movement to the left by one.
-Fixed: If you move up or down on a last existing letter of a format, it will temporary overwrite the formatting of the following letters. 
-Fixed tabs in SuperEditableTextModule: If tab was the first or second character in the line, arrow movement crashed the engine.

30.03.2024
-Still working on format cursors.

24.03.2024
-Still working on format cursors.

23.03.2024
-Still working on format cursors.

19.03.2024
-Porting things from EditableTextModule to SuperEditableTextModule. Debugging cursor selection.

18.03.2024
-Copied the editing capabilities of the EditableTextModule to the SuperEditableTextModule.

17.03.2024
-Implemented a base for the SuperEditableTextModule.
-Implemented SuperTextModule.
-Implemented basic functionality of the SuperTextModule.

15.03.2024
-Fixed memory leaks by removing bitmap loading and creation in image module. Allegro5 is not very good at destroying bitmaps instatly.
-Made a simple config file with backbuffer bitmap sampling and size.

14.03.2024
-Optimized RAM and CPU usage by removing bitmaps from cameras, tweaking sampling and flags.

1.03.2024
-Fixed "exists" attribute in "findNextValue" function.

28.02.2024
-Implemented tab autocomplete inside the terminal.
-Added "similar" instruction.
-Create "Mover" program - basic tool to move objects around in the selected layer.
-Added a propagation of "isAttachedToCamera" variable value from the object to its modules. 
-Removed drawing-order layers from the drawing function.

26.02.2024
-Renamed "canMoveWithMouse" and "canInteractWithMouse" camera variables with "isVisionAffectedByMouse" and "canBeModifiedByMouse".
-Created "history" command that prints out every instance of command history vector.
-Added moving cursor to the front or behind the marked text fragment based on arrow key direction.

25.02.2024
-Implement the functionality for up-down arrows inside the terminal.
-Finished the vector module.

24.02.2024
-Created the vector module.
-Removed old unused code (windowEditor).
-Removed default variables from VariableModule.

14.02.2024
-Fixed "reboot" instruction.

2.02.2024
-Secured "load_text" instructions with "exists" check. 
-Added "exists" source to expressions: checking if a file or directory exists.

1.02.2024
-Implemented "cd" and "pwd" instructions.
-Added "isFocused" variable to cameras.
-Created basic notepad. 

31.01.2024
-Added minimize and bringBack functions to cameras. Replaced deactivate and activate function with two new ones in camera selection and rearrangement.
-Made borderless mode react to display size.
-Added borderless mode to windows' template.
-Implemented maximize and minimize button functionalities to windows' template.
-Added resize blocking for cameras.

30.01.2024
-Added "restart_drag" instruction for recalculating the starting position of selected camera dragging.
-Added mouse interactions and circle collision type to the collision module.
-Implemented exit button functionality to windows' template.
-Fixed TriggeredObjects vector corruption caused by deleting layers and objects.

23.01.2024
-Tested new button idea with distance measuring.
-Added "**" (power) instruction. 
-Fixed regex again.
-Fixed isConditionMet() - added type converting.

22.01.2024
-Added "ls" instruction for listing out files in the chosen directory.
-Renamed "ls" into "lse" (listing out entities).

21.01.2024
-Fixed font glitches with "al_set_new_bitmap_flags(ALLEGRO_MEMORY_BITMAP)" on linux.
-Tested al_resize_display on linux.

20.01.2024
-Changed instructions' type from string to char (enum).

18.01.2024
-Added "used_os" attribute to the "value" instruction.
-Fixed "new" instruction for new layers creation - owner's layer pointer was not recalculated during the vector resizing.

17.01.2024
-Tested windowTemplate script.
-Fixed "value" instruction regarding objects.
-Fixed the lack of layerID propagation to modules during cloning.

16.01.2024
-Fixed layers cloning: ids of the cloned objects were blank.
-Created a window template with resizable elements.
-Added "find_by_id_2" instruction - easier to use than the original one.
-Added "size" instruction - getting the size of the vectors.
-Added "dump_context_stack" instruction for debugging.
-Added gradient drawing functions.
-Added real antialiasing.
-Added a cool font.
-Fixed segmentation fault caused by fonts.

11.01.2024
-Added "load_font" instruction.
-Fixed the crash caused by the lack of fonts.

10.01.2024
-Added ctrl+L shortcut to clear the screen.

09.01.2024
-Added ctrl+I shortcut to start editing in the text editor.
-Moved context removal to the loop back if statement - the post-instructions were losing context from the pre-instructions.
-Added "start_editing" and "stop_editing" functions to the EditableText module. 

06.01.2024
-Improved "Sand" terminal.
-Improved load_text.
-Improved save_text.

05.01.2024
-Improved ContextClass with safe getters.
-Added "substr" instructions - returning a substring from the text.
-Added "len" instruction - returning the length of the text.

04.01.2024
-Added protected area to editable text module.
-Fixed dynamic cursor change.
-Blocked user input (mouse and keyboard) in not focused processes.
-Blocked user input (mouse and keyboard) in the processes with "canUserInteract" variable equal to false.