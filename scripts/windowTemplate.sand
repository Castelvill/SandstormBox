start checkIfWindowMoved
	triggers mouse_pressing
	if ([mouse_moved] [c isBorderless] ! &&)
	all camera _ camera _ Cameras
	find_by_id_2 Cameras cameraID Camera
	run revertWindowIfMoved refreshWindowWithCamera
end

start checkIfDisplayResize
	triggers on_display_resize
	if ([c isMaxed] [on_display_resize] &&)
	run refreshWindowWithDisplay
end

start revertWindowIfMoved
	if ([c isMaxed] [c Camera grabbed] &&)
	bool [false] False
	= isMaxed False
	fun Camera set_can_mouse_resize true
	value ([mouse_x]) MouseX
	value ([mouse_y]) MouseY
	= posX MouseX
	= posY MouseY
	value ([c sizeX]) sizeXTemp
	int [2] Two
	/= sizeXTemp Two
	-= posX sizeXTemp
	int [10] Ten
	-= posY Ten
	run revertBorderIfPossible revertWindowFromMax
end


start revertBorderIfPossible
	if ([c isBorderless] ! [c isMaxed] ! &&)
	all layer _ _ _ _ _ _ Layers
	value ([context me layer_id]) myLayerID
	find_by_id_2 Layers myLayerID Layer
	index Layer [0 0 2] primitives Border
	fun Border activate
end

start refreshWindowWithDisplay
	all camera _ camera _ Cameras
	find_by_id_2 Cameras cameraID Camera
	value ([window_w]) sx
	value ([window_h]) sy
	fun Camera resize sx sy
	run refreshWindow
end

start refreshWindowWithCamera
	all camera _ camera _ Cameras
	find_by_id_2 Cameras cameraID Camera
	value ([context Camera size_x]) sx
	value ([context Camera size_y]) sy
	run refreshWindow
end


start refreshWindow
	int [-100] sxShift
	+= sxShift sx
	int [30] height

    fun Camera set_grabbing_area_size sxShift height

    value ([context me layer_id]) myLayerID
    all layer _ _ _ _ _ _ Layers
    find_by_id_2 Layers myLayerID Layer

    index Layer [0 0 0] primitives Primi
    fun Primi set_size sx sy
    fun Primi update_with_size

    index Layer [0 0 1] primitives Primi
    int [30] height
    fun Primi set_size sx height
    fun Primi update_with_size

    index Layer [0 0 2] primitives Primi
    int [-4] sxShift
    int [-4] syShift
    += sxShift sx
    += syShift sy
    fun Primi set_size sxShift syShift
    fun Primi update_with_size

    index Layer [0 0 3] primitives Primi
    int [-20] sxShift
    int [15] height
    += sxShift sx
    fun Primi set_position sxShift height
    fun Primi update_with_size

    index Layer [0 0 0] collision ExitCollision
    fun ExitCollision set_position sxShift height

    index Layer [0 0 4] primitives Primi
    int [-50] sxShift
    int [15] height
    += sxShift sx
    fun Primi set_position sxShift height
    fun Primi update_with_size

    index Layer [0 0 1] collision MaxCollision
    fun MaxCollision set_position sxShift height

    index Layer [0 0 5] primitives Primi
    int [-80] sxShift
    int [15] height
    += sxShift sx
    fun Primi set_position sxShift height
    fun Primi update_with_size

    index Layer [0 0 2] collision MinCollision
    fun MinCollision set_position sxShift height

    run updateIfNotMaxed additionalUpdate
end


start updateIfNotMaxed
    if([c isMaxed] !)
    = sizeX sx
    = sizeY sy
    //print "x" _ c sx
    //print "\n" _ c sy
    value ([context Camera pos_x]) cpx
    value ([context Camera pos_y]) cpy
    = posX cpx
    = posY cpy
end


start additionalUpdate
end


start exitWindow
    triggers mouse_released
    if ([mouse_released 0])
    value ([context me layer_id]) myLayerID
    all layer _ _ _ _ _ _ Layers
    find_by_id_2 Layers myLayerID Layer
    index Layer [0 0 0] collision ExitCollision
    run exitWindowCheck
end

start exitWindowCheck
    if([c ExitCollision release_on])
    bool [true] True
    = delete True
end

start deleteWindow
    triggers each_iteration
    if ([c delete] [c has_friends] ! [c deleted_friends] || &&)
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    delete Camera
    delete my_layer
end


start maxWindow
    triggers mouse_released
    if ([mouse_released 0])
    value ([context me layer_id]) myLayerID
    all layer _ _ _ _ _ _ Layers
    find_by_id_2 Layers myLayerID Layer
    index Layer [0 0 1] collision MaxCollision
    run maxWindowCheck
end

start maxWindowCheck
    if([c MaxCollision release_on])
    fun isMaxed toggle_bool
    run maxWindowIfTrue refreshWindowWithCamera
end

start maxWindowIfTrue
    if([c isMaxed])
    all layer _ _ _ _ _ _ Layers
    value ([context me layer_id]) myLayerID
    find_by_id_2 Layers myLayerID Layer
    index Layer [0 0 2] primitives Border
    fun Border deactivate
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    fun Camera set_can_mouse_resize false
    value ([window_w]) ww
    value ([window_h]) wh
    fun Camera resize ww wh
    fun Camera set_relative_position 0 0
    else revertWindowFromMax
end

start revertWindowFromMax
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    fun Camera set_can_mouse_resize true
    fun Camera resize sizeX sizeY
    fun Camera set_relative_position posX posY
    restart_drag
    run revertBorderIfPossible
end


start minimizeWindow
    triggers mouse_released
    if ([mouse_released 0])
    value ([context me layer_id]) myLayerID
    all layer _ _ _ _ _ _ Layers
    find_by_id_2 Layers myLayerID Layer
    index Layer [0 0 2] collision MinCollision
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    run minimizeWindowCheck
end


start minimizeWindowCheck
    if([c MinCollision release_on])
    fun Camera minimize
end


start switchBorderlessMode
    triggers key_pressed
    if ([key_pressed 57])
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    run switchBorderlessModeCheckFocus
end


start switchBorderlessModeCheckFocus
    if([c Camera is_focused])
    fun isBorderless toggle_bool
    run switchToBorderless
end

start switchToBorderless
    if ([c isBorderless])
    fun me set_position -5 -30
    all layer _ _ _ _ _ _ Layers
    value ([context me layer_id]) myLayerID
    find_by_id_2 Layers myLayerID Layer
    index Layer [0 0 1] primitives Toolbar
    fun Toolbar deactivate
    index Layer [0 0 2] primitives Border
    fun Border deactivate
    index Layer [0 0 3] primitives ExitButton
    fun ExitButton deactivate
    index Layer [0 0 4] primitives MaxButton
    fun MaxButton deactivate
    index Layer [0 0 5] primitives MinButton
    fun MinButton deactivate
    index Layer [0 0 0] super_text Title
    fun Title deactivate
    index Layer [0 0 0] collision ExitCollision
    fun ExitCollision deactivate
    index Layer [0 0 1] collision MaxCollision
    fun MaxCollision deactivate
    index Layer [0 0 2] collision MinCollision
    fun MinCollision deactivate
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    fun Camera set_can_be_grabbed false
    fun Camera set_can_mouse_resize false
    value ([context Camera size_x]) cpx
    value ([context Camera size_y]) cpy
    int [10] shiftX
    int [80] shiftY
    += cpx shiftX
    += cpy shiftY
    index Layer [0 0 0] primitives Background
    fun Background set_size cpx cpy
    fun Background update_with_size
    else switchFromBorderless
end

start switchFromBorderless
    all layer _ _ _ _ _ _ Layers
    fun me set_position 0 0
    value ([context me layer_id]) myLayerID
    find_by_id_2 Layers myLayerID Layer
    index Layer [0 0 1] primitives Toolbar
    fun Toolbar activate
    index Layer [0 0 3] primitives ExitButton
    fun ExitButton activate
    index Layer [0 0 4] primitives MaxButton
    fun MaxButton activate
    index Layer [0 0 5] primitives MinButton
    fun MinButton activate
    index Layer [0 0 0] super_text Title
    fun Title activate
    index Layer [0 0 0] collision ExitCollision
    fun ExitCollision activate
    index Layer [0 0 1] collision MaxCollision
    fun MaxCollision activate
    index Layer [0 0 2] collision MinCollision
    fun MinCollision activate
    all camera _ camera _ Cameras
    find_by_id_2 Cameras cameraID Camera
    fun Camera set_can_be_grabbed true
    fun Camera set_can_mouse_resize true
    run revertBorderIfPossible
end
