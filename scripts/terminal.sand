start onInit
    triggers on_init
    //edit_proc draw_hitboxes 1
    //edit_proc print_instructions 1
    //edit_proc auto_print_stack 1
    edit_proc draw_text_borders 0

    edit_proc draw_camera_borders 1

    load_bitmap "images/background.png" "background" false true
    load_bitmap "images/error.png" "error" false true
    load_bitmap "images/elephant.jpg" "elephant" false true
    load_bitmap "gui/sand_thumb_track.png" "sand_thumb_track" false true
    load_bitmap "gui/sand_thumb.png" "sand_thumb" false true
	load_bitmap "images/despair.png" "despair" false true

    string ["fonts/CascadiaCode.ttf"] path
    int [16] size
    string ["cascadia_code"] name
    load_font path size name true

    string ["fonts/CascadiaCode-Bold.ttf"] path
    int [20] size
    string ["cascadia_code_bold"] name
    load_font path size name true

    string ["fonts/fira_mono.ttf"] path
    int [20] size
    string ["fira_mono"] name
    load_font path size name true

    run resizeDisplay buildTerminal createWindowTemplate runAfterInit
end

start runAfterInit
    //cd scripts
    //bool [true] xd
    //= xd false
    //print "\n" _ xd
	run forceRefresh
end

start resizeDisplay
    if ([used_os] ["windows"] ==)
    //env window_size 1366 568
    //edit_proc window_size 1366 568
    edit_proc window_size 1920 1080
    env window_size 1366 768//640 480//1920 1080
    else resizeDisplayLinux
end

start resizeDisplayLinux
    if ([used_os] ["linux"] == [fullscreen] ! &&)
    //env window_size 1366 568
    //edit_proc window_size 1366 568
    //env window_size 800 300
    env window_size 920 480
    edit_proc window_size 1920 1080
    else resizeDisplayLinuxIfFullscreen
end

start resizeDisplayLinuxIfFullscreen
    if([fullscreen])
    //env window_size 1920 1080
end


start buildTerminal
    value ([window_w]) ww
    value ([window_h]) wh

    new camera 1 _ _ Cam
    //fun Cam set_position 100 100
    fun Cam set_id "Desktop"
    fun Cam set_active true
    fun Cam resize ww wh
    //fun Cam resize 200 100
    fun Cam set_zoom 1.0
    fun Cam set_speed 20
    fun Cam set_key_zoom_in 15
    fun Cam set_key_zoom_out 21
    fun Cam set_zoom_increase 0.02
    fun Cam add_visible_layer "KERNEL"
    fun Cam add_accessible_layer "KERNEL"
    fun Cam set_tint 1.0 1.0 1.0 1.0
    fun Cam set_is_vision_affected_by_mouse false
    fun Cam set_can_zoom_with_mouse false
    fun Cam set_can_move_with_keyboard false
    fun Cam set_can_zoom_with_keyboard false
    fun Cam set_drawing_borders false
    fun Cam focus

    //fun Cam set_can_edit_text false
    fun Cam set_can_move_objects false

    new image me 1 _ _ background
    fun background connect_bitmap_via_alias "background"
    fun background resize ww wh
    fun background set_color 0.5 0.5 0.5 0.3
    fun background disable_scrolling

    int [0 0] editableTextPos

    var "0.988235294" terminalColorR
    var "0.909803922" terminalColorG
    var "0.764705882" terminalColorB
    var "1.0" terminalColorA

    var 0.2 terminalAccentColorR
    var 0.0 terminalAccentColorG
    var 0.0 terminalAccentColorB
    var 1.0 terminalAccentColorA


    new super_editable_text me 1 _ _ TerminalTextField
    fun TerminalTextField set_id "edi"
    fun TerminalTextField set_position editableTextPos
    fun TerminalTextField set_size ww wh
    //fun TerminalTextField set_size 884 480
    fun TerminalTextField add_format "cascadia_code" 1
    fun TerminalTextField set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun TerminalTextField set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    fun TerminalTextField set_wrapping "w"
    fun TerminalTextField set_can_be_edited true
    fun TerminalTextField set_can_use_space true
    fun TerminalTextField set_content "Welcome in the SandstormBox terminal!"
    fun TerminalTextField set_input_delay 0.3
    fun TerminalTextField set_repetition_delay 0.05
    fun TerminalTextField set_can_use_tabs false
    fun TerminalTextField set_can_use_enter false
    fun TerminalTextField set_protected_area 37
    fun TerminalTextField set_ignore_vertical_arrows true
    fun TerminalTextField set_can_copy_format true
    fun TerminalTextField start_editing

    var 24 minScrollbarThumbHeight

    new image me 1 _ _ thumb
    fun thumb set_id "thumb"
    fun thumb deactivate
    fun thumb set_position 2 2
    fun thumb set_size 16 16
    fun thumb resize 12 minScrollbarThumbHeight
    fun thumb connect_bitmap_via_alias "sand_thumb"
    fun thumb disable_scrolling

    new image me 1 _ _ thumbTrack
    fun thumbTrack set_id "thumb_track"
    fun thumbTrack deactivate
    fun thumbTrack set_size 100 500
    fun thumbTrack resize 16 480
    fun thumbTrack connect_bitmap_via_alias "sand_thumb_track"
    fun thumbTrack disable_scrolling

    var 476.0 scrollbarHeight

    new scrollbar me 1 _ _ MainScrollbar
    fun MainScrollbar disable_scrolling
    //fun MainScrollbar deactivate
    fun MainScrollbar set_can_be_drawn true
    fun MainScrollbar set_id "MainScrollbar"
    fun MainScrollbar set_position 884 0
    fun MainScrollbar set_thumb_position 450 0 //450
    fun MainScrollbar set_thumb_size 12 476
    fun MainScrollbar set_scrolling_area 12 476
    fun MainScrollbar set_real_scrolling_area 0 0
    fun MainScrollbar set_thumb_image_id "thumb"
    fun MainScrollbar set_track_image_id "thumb_track"
    fun MainScrollbar set_mouse_wheel_speed 40.0
    fun MainScrollbar add_camera "Desktop"

    var 30 commandLineHeight

    new super_editable_text me 1 _ _ TextEditor
    clone TextEditor TerminalTextField
    fun TextEditor add_format "cascadia_code_bold" 1
    fun TextEditor set_color 0 0.2 0.74 0.7 1.0 //[0.0 0.7 0.0 1.0]
	fun TextEditor set_accent_color 0 0.0 0.0 0.0 1.0 //[0.0 0.2 0.0 1.0]
    fun TextEditor set_id "TextEditor"
    fun TextEditor set_protected_area 0
    fun TextEditor set_can_use_enter true
    fun TextEditor set_content ""
    fun TextEditor set_ignore_vertical_arrows false
    fun TextEditor set_can_use_tabs true
    fun TextEditor deactivate

    new scrollbar me 1 _ _ TextEditorScrollbar
    fun TextEditorScrollbar disable_scrolling
    fun TextEditorScrollbar set_can_be_drawn true
    fun TextEditorScrollbar set_id "TextEditorScrollbar"
    fun TextEditorScrollbar set_position 884 0
    fun TextEditorScrollbar set_thumb_position 450 0//450
    fun TextEditorScrollbar set_thumb_size 12 476
    fun TextEditorScrollbar set_scrolling_area 12 476
    fun TextEditorScrollbar set_real_scrolling_area 0 0
    fun TextEditorScrollbar set_thumb_image_id "thumb"
    fun TextEditorScrollbar set_track_image_id "thumb_track"
    fun TextEditorScrollbar set_mouse_wheel_speed 40.0
    fun TextEditorScrollbar deactivate
    fun TextEditorScrollbar add_camera "Desktop"

    new particles me 1 _ _ Particles
    fun Particles set_position 200 200
    fun Particles set_size 10 10
    fun Particles deactivate
    fun Particles set_block_spawning true
    fun Particles spawn_on_key_release false
    fun Particles set_spawn_rate 100 100
    fun Particles set_spawn_cap 500
    fun Particles set_max_time_to_spawn 0.05
    fun Particles set_basic_speed 0.1 1.0
    fun Particles set_speed 0.1 1.0
    fun Particles set_environment 0.0 0.0
    fun Particles set_environment_speed 0.0 0.0
    fun Particles set_acceleration 0.0 0.0
    fun Particles set_mass 0.4 0.7
    fun Particles set_directional_degree 0.0 360.0
    fun Particles set_rotation_speed 0.0 0.0
    fun Particles set_time_to_negate_rotation 0.0 0.0
    fun Particles set_radius 1.0 1.0
    fun Particles set_time_to_death 0.2 0.2
    fun Particles set_color_intensity 0.8 1.0
    fun Particles set_shape_rotation_speed -2.0 2.0
    fun Particles set_shape 0
    fun Particles set_use_images false
    fun Particles set_drawing_details false
    fun Particles set_is_static false
    //fun Particles bind_key "p"
    //fun Particles add_image "insane"
    

    var "_enter" program
    var "" param0
    var "" param1
    var "" param2
    var "" param3
    var "" param4
    var "" param5
    var "" param6
    var "" param7
    var 20 roundingSize

    var 0 commandNumber
    var 0 currentCommandNumber
    vec string [""] commandHistory

    vec string ["help" "ls" "cls" "cat" "cd" "pwd" "mv" "print" "exit" "reboot" "history" "forgor" "edit" "sand" "sh" "nw" "note" "mover" "fullscreen" "fs" "neofetch" "spawn" "hello" "sq" "cats" "v4" "sel_col" "xd" "wait" "sudo" "allegro" "save_terminal" "load_terminal" "test"] allowedPrograms

    var "scripts" dir

    var 0 waitingTime

    string ["history.txt"] fileName
    run loadCommandHistory
end


start loadCommandHistory
    if([exists fileName])
    load_text fileName loadedText
    tokenize "\n" loadedText loadedText
    fun commandHistory clear
    fun commandHistory push_back loadedText
    value ([commandHistory size]) newSize
    -- newSize
    = commandNumber newSize
    = currentCommandNumber newSize
end

start selectTextWithMouse
    triggers mouse_pressing
    if ([mouse_pressing 0])
    index me [0 1] super_editable_text TextField
    value ([TextField cursor_pos_y]) cursorPosY
    index me [0 1] scrollbar Scrollbar
    value ([Scrollbar scroll_shift_y]) scrollShiftY
    -= cursorPosY scrollShiftY
    value ([window_h]) windowH
    double [-30] windowLimitYDown
    += windowLimitYDown windowH
    double [10] windowLimitYUp
    run moveScrollbarBySelectingText
end
start selectTextWithKeys
    triggers any_key_pressing
    if ([any_key_pressing])
    index me [0 1] super_editable_text TextField
    value ([TextField cursor_pos_y]) cursorPosY
    index me [0 1] scrollbar Scrollbar
    value ([Scrollbar scroll_shift_y]) scrollShiftY
    -= cursorPosY scrollShiftY
    value ([window_h]) windowH
    double [-20] windowLimitYDown
    += windowLimitYDown windowH
    double [0] windowLimitYUp
    run moveScrollbarBySelectingText
end
start moveScrollbarBySelectingText
    if ([TextField is_editing_active] [cursorPosY] [windowLimitYDown] > &&)
    index me [0 1] scrollbar Scrollbar
    fun Scrollbar scroll_by_distance 0 8
    fun me update_scrollbars
    else moveScrollbarBySelectingTextUp
end
start moveScrollbarBySelectingTextUp
    if ([TextField is_editing_active] [cursorPosY] [windowLimitYUp] < &&)
    index me [0 1] scrollbar Scrollbar
    fun Scrollbar scroll_by_distance 0 -8
    fun me update_scrollbars
end

start spawnParticles
    //triggers each_iteration
    //triggers key_pressing
    //if ([any_key_pressing])
    /*index me [0 0] particles Particles
    index me [0 1] super_editable_text TextField
    value ([TextField cursor_pos_x] [TextField cursor_pos_y]) cursorPos
    index me [0 1] scrollbar Scrollbar
    value ([Scrollbar scroll_shift_x] [Scrollbar scroll_shift_y]) scrollShift
    -= cursorPos scrollShift
    fun Particles set_position cursorPos
    fun Particles allow_spawning*/
end


start createWindowTemplate
    new layer 1 _ _ WindowLayer
    fun WindowLayer deactivate
    fun WindowLayer set_id "WindowLayer"
    value ([WindowLayer id]) newLayerID

    new camera 1 _ _ WindowCamera
    fun WindowCamera set_position 0 0
    fun WindowCamera set_id "WindowCamera"
    fun WindowCamera set_active true
    fun WindowCamera resize 640 480
    fun WindowCamera set_zoom 1.0
    fun WindowCamera set_speed 20
    fun WindowCamera set_key_zoom_in 15
    fun WindowCamera set_key_zoom_out 21
    fun WindowCamera set_zoom_increase 0.02
    fun WindowCamera bind_keys 15 21 13 9 12 11 10
    fun WindowCamera set_tint 1.0 1.0 1.0 1.0
    fun WindowCamera set_drawing_borders false
    fun WindowCamera set_can_be_modified_by_mouse true
    fun WindowCamera set_is_vision_affected_by_mouse true
    //fun WindowCamera add_visible_layer "WindowLayer"
    //fun WindowCamera add_accessible_layer "WindowLayer"
    fun WindowCamera set_grabbing_area_size 540 50
    fun WindowCamera pin_to_camera "Desktop"
    fun WindowCamera activate_pin
    fun WindowCamera set_min_size 300 34
    fun WindowCamera set_keep_inside_screen false
    fun WindowCamera deactivate
    fun WindowCamera forbid_drawing_object_borders

    new object WindowLayer 1 _ _ NewWindowObject
    fun NewWindowObject set_id "WindowObject"
    //fun NewWindowObject set_can_be_selected true
    fun NewWindowObject disable_scrolling
    fun NewWindowObject set_can_be_moved_with_mouse false
    bind NewWindowObject ["scripts/windowTemplate.sand"]
    build NewWindowObject true

    new variable NewWindowObject 1 _ _ objectsCameraID
    fun objectsCameraID set_id "cameraID"
    fun objectsCameraID set_string "WindowCamera"

    new variable NewWindowObject 1 _ _ isMaxed
    fun isMaxed set_id "isMaxed"
    fun isMaxed set_bool false
    new variable NewWindowObject 1 _ _ sizeX
    fun sizeX set_id "sizeX"
    fun sizeX set_double 640
    new variable NewWindowObject 1 _ _ sizeY
    fun sizeY set_id "sizeY"
    fun sizeY set_double 480
    new variable NewWindowObject 1 _ _ posX
    fun posX set_id "posX"
    fun posX set_double 0.0
    new variable NewWindowObject 1 _ _ posY
    fun posY set_id "posY"
    fun posY set_double 0
    new variable NewWindowObject 1 _ _ isBorderless
    fun isBorderless set_id "isBorderless"
    fun isBorderless set_bool false

    new variable NewWindowObject 1 _ _ newVal
    fun newVal set_id "delete"
    fun newVal set_bool false

    new variable NewWindowObject 1 _ _ newVal
    fun newVal set_id "has_friends"
    fun newVal set_bool false

    new variable NewWindowObject 1 _ _ newVal
    fun newVal set_id "deleted_friends"
    fun newVal set_bool false

    new primitives NewWindowObject 1 _ _ border1
    fun border1 set_id "background"
    fun border1 set_type "filled_rectangle"
    fun border1 add_point 0.0 0.0
    fun border1 add_point 640 480
    fun border1 set_color 0.0 0.0 0.0 1.0
    fun border1 set_size 640 480
    fun border1 update_with_size

    new primitives NewWindowObject 1 _ _ border2
    clone border2 border1
    fun border2 set_id "toolbar"
    fun border2 set_color 0.109 0.537 0.2039 1.0
    fun border2 set_size 640 30
    fun border2 update_with_size

    new primitives NewWindowObject 1 _ _ border3
    clone border3 border1
    fun border3 set_id "border"
    fun border3 set_type "rectangle"
    fun border3 set_color 0.109 0.537 0.2039 1.0
    fun border3 set_position 2 2
    fun border3 set_size 636 476
    fun border3 set_thickness 5.0
    fun border3 update_with_size

    new primitives NewWindowObject 1 _ _ exitButton
    fun exitButton set_id "exitButton"
    fun exitButton set_type "filled_circle"
    fun exitButton add_point 0.0 0.0
    fun exitButton add_point 5 5
    fun exitButton set_color 1.0 0.0 0.0 1.0
    fun exitButton set_position 620 15
    fun exitButton set_size 20 20
    fun exitButton update_with_size

    new collision NewWindowObject 1 _ _ ExitCollision
    fun ExitCollision set_position 620 15
    fun ExitCollision set_size 10 10
    fun ExitCollision set_is_circle true

    new primitives NewWindowObject 1 _ _ MaxButton
    clone MaxButton exitButton
    fun MaxButton set_id "MaxButton"
    fun MaxButton set_position 590 15
    fun MaxButton set_color 1.0 1.0 0.0 1.0

    new collision NewWindowObject 1 _ _ MaxCollision
    fun MaxCollision set_position 590 15
    fun MaxCollision set_size 10 10
    fun MaxCollision set_is_circle true

    new primitives NewWindowObject 1 _ _ minimizeButton
    clone minimizeButton exitButton
    fun minimizeButton set_id "minimizeButton"
    fun minimizeButton set_position 560 15
    fun minimizeButton set_color 0.0 1.0 0.0 1.0

    new collision NewWindowObject 1 _ _ MinCollision
    fun MinCollision set_position 560 15
    fun MinCollision set_size 10 10
    fun MinCollision set_is_circle true

    new super_text NewWindowObject 1 _ _ title
    fun title set_id "title"
    fun title set_position 10 2
    fun title set_size 400 50
    fun title add_format "cascadia_code_bold" 8
    fun title set_color 0 1.0 1.0 1.0 1.0
    fun title set_wrapping "n"
    fun title set_content "Template Window"
    fun title disable_scrolling
end


start nw
    run spawnNewWindow
end


start spawnNewWindow
    all Cameras _ camera _ Cameras
    string ["WindowCamera"] cameraID
    find_by_id_2 Cameras cameraID TemplateCamera
    all Layers _ _ _ _ _ _ Layers
    string ["WindowLayer"] layerID
    find_by_id_2 Layers layerID TemplateLayer

    new layer 1 _ _ NewWindowLayer
    clone NewWindowLayer TemplateLayer
    fun NewWindowLayer set_id param1
    value ([NewWindowLayer id]) newLayerID
    fun NewWindowLayer activate

    index NewWindowLayer [0 0 0] super_text Title
    fun Title set_content param1

    new camera 1 _ _ NewWindowCamera
    clone NewWindowCamera TemplateCamera
    fun NewWindowCamera set_id param1
    value ([NewWindowCamera id]) newCameraID
    fun NewWindowCamera activate
    fun NewWindowCamera add_visible_layer newLayerID
    fun NewWindowCamera add_accessible_layer newLayerID
    fun NewWindowCamera set_drawing_borders false
    index NewWindowLayer [0 0 0] variable objectsCameraID
    = objectsCameraID newCameraID
    string [""] program
end


start note
    int [0] NewWindowLayer
    string [""] fileName
    = fileName param1
    string ["Note"] param1
    run spawnNewWindow spawnNotepad
end
start spawnNotepad
    index me [0 1] super_editable_text Editable
    index NewWindowLayer [0 0] object Object
    index NewWindowLayer [0 0 0] primitives Background
    fun Background set_color 0.0 0.0 0.0 1.0
    new super_editable_text Object 1 _ _ TextEditor
    clone TextEditor Editable
    fun TextEditor set_id "Notepad"
    fun TextEditor set_position 5 30
    fun TextEditor set_size 640 480
    fun TextEditor set_color 0 1.0 0.0 0.0 1.0
    fun TextEditor set_wrapping "n"
    fun TextEditor set_content ""
    fun TextEditor activate
    fun Object set_size 640 480
    bind Object ["scripts/notepad.sand"]
    build Object true
    run loadTextFromFile
end


start mover
    int [0] NewWindowLayer
    string [""] selectedLayerID
    = selectedLayerID param1
    string ["Mover"] param1
    int [0] NewWindowCamera
    run spawnNewWindow spawnMover
end
start spawnMover
    index me [0 1] super_editable_text Editable
    index NewWindowLayer [0 0] object NewObject
    first NewObject _ _ variable has_friends bool _ has_friends
    bool [true] True
    = has_friends True
    find_by_id_2 NewObject has_friends 
    index NewWindowLayer [0 0 0] primitives Background
    fun Background set_color 0.0 0.0 0.0 1.0
    //value ([my_layer id]) selectedLayerID
    value ([NewWindowCamera id]) windowCameraID
    new camera 1 _ _ InsideCamera
    fun InsideCamera activate
    fun InsideCamera add_visible_layer selectedLayerID
    fun InsideCamera add_accessible_layer selectedLayerID
    fun InsideCamera pin_to_camera windowCameraID
    fun InsideCamera activate_pin
    fun InsideCamera set_relative_position 5 30
    fun InsideCamera resize 630 440
    //fun InsideCamera set_can_move_objects true
    fun InsideCamera set_can_edit_text false
    fun InsideCamera set_id "insideCamera"
    fun InsideCamera set_min_size 0 0
    fun InsideCamera allow_drawing_object_borders 

    value ([InsideCamera id]) newCameraID

    new variable NewObject 1 _ _ cameraID
    fun cameraID set_id "insideCameraID"
    fun cameraID set_string newCameraID

    //bind NewObject ["scripts/mover.sand"]
    //build_subset NewObject false
    load_build NewObject _ ["scripts/mover.sand"]
end


start interrupt
    triggers key_pressed
    if ([key_pressed 215] [key_pressed 3] &&) //217-ctrl, 215-shift, 3-c
    
    string [""] program
    string ["^C\n"] result
    run printOnTerminal
end

start autoComplete
    triggers key_pressed
    if ([key_pressed 64] [program] ["sleep"] == &&)
    index Cameras [0] camera Camera
    run autoComplete1
end

start autoComplete1
    if ([Camera is_selected])
    index me [0 0] super_editable_text EditableText
    fun EditableText set_last_color 1.0 0.8 0.0 1.0
    fun EditableText set_last_accent_color 0.0 0.0 0.0 1.0
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    similar command allowedPrograms completes
    string ["\n"] result
    //+= result completes
    value ([completes size]) size
    int [0] i
    run replaceWithAutoComplete
end

start replaceWithAutoComplete
    if ([completes size] [1] ==)
    fun EditableText cut_unprotected_area
    index completes [0] value instance
    fun EditableText add_content instance
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
    else printPossibleCompletes
end

start createPrompt
    //Cool way of creating prompt is not possible until extended ascii characters are not handled well in the editable text module.
    //string ["┌/"] begin
    string ["~/"] begin
    += result begin
    pwd workingDir
    += result workingDir
    //string ["\n└─$"] secondLine
    string ["\n$"] secondLine
    += result secondLine
end

start putNewLine
    string ["\n"] newLine
    += result newLine
end

start addAllCompletes true
    if ([i] [completes size] <)
    index completes [i] value instance
    += result instance
    string [" "] space
    += result space
    ++ i
end

start rstTermBuff
    fun EditableText set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun EditableText set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    string [""] result
end

start printPrompt
    string [""] result
    index me [0 0] super_editable_text EditableText
    run rstTermBuff createPrompt printOnTerminal colorNormalText
end

start printPossibleCompletes
    run addAllCompletes putNewLine printOnTerminal printPrompt rewriteLastCommand
end

start rewriteLastCommand
    fun EditableText add_content command
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end


start controler
    triggers each_iteration
    if ([program] [""] ==)
    index me [0 0] super_editable_text EditableText
    fun EditableText set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun EditableText set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    string ["sleep"] program
    string [""] result
    run createPrompt printOnTerminal colorNormalText
end


start clearOnShortcut
    triggers key_pressed
    if ([program] ["sleep"] == [key_pressed 217] && [key_pressed 12] &&)
    index Cameras [0] camera Camera
    run clearOnShortcutIfFocused
end

start clearOnShortcutIfFocused
    if ([Camera is_selected])
    run cls
end

start controlerWithEnter
    triggers each_iteration
    if ([program] ["_enter"] ==)
    index me [0 0] super_editable_text EditableText
    fun EditableText set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun EditableText set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    string ["sleep"] program
    string ["\n"] result
    run createPrompt printOnTerminal colorNormalText
end

start colorNormalText
    fun EditableText set_last_color 0.86 0.85 0.86 1.0
    fun EditableText set_last_accent_color 0.0 0.0 0.0 1.0
    string [" "] result
    run printOnTerminal
end



start fs_click false
    triggers key_pressed
    if ([key_pressed 58])
    run setFullscreen
end

start fullscreen
    string [""] program
    run setFullscreen
end

start fs
    string [""] program
    run setFullscreen
end

start setFullscreen
    if ([fullscreen] !)
    env fullscreen 1
    else fs_else
end

start fs_else
    env fullscreen 0
end

start refresh
    triggers on_display_resize
    if([on_display_resize])
    run forceRefresh
end

start forceRefresh
    value ([window_w]) w
    value ([window_h]) h
    index Cameras [0] camera Cam0
    fun Cam0 resize w h
    index me [0 0] image background
    fun background resize w h

    index me [0 1] super_editable_text EditProgramTextField
    value ([EditProgramTextField size_y]) EditorSizeY
    int [476] textHeight
    = textHeight h
    -= textHeight commandLineHeight
    fun EditProgramTextField set_size w h
    fun EditProgramTextField update
    fun EditProgramTextField crop_height_to_text

    index me [0 0] super_editable_text TerminalTextField
    value ([TerminalTextField size_y]) TerminalSizeY
    fun TerminalTextField set_size w TerminalSizeY
    fun TerminalTextField update
    fun TerminalTextField crop_height_to_text
    value ([TerminalTextField size_y]) TerminalSizeY
    run resizeTerminalIfSmall refreshScrollbar refreshTextEditorScrollbarIfEditing
end

start refreshTextEditorScrollbarIfEditing
    if ([program] ["edit"] ==)
    run refreshTextEditorScrollbar
end

start resizeTerminalIfSmall
    if([TerminalSizeY] [h] < )
    fun TerminalTextField set_size w h
end

start refreshScrollbar
    index me [0 0] super_editable_text TerminalTextField
    value ([TerminalTextField size_y]) TerminalSizeY
    value ([window_h]) h
    -= TerminalSizeY h

    = scrollbarHeight h
    index me [0 0] scrollbar MainScrollbar
    value ([window_w]) windowW
    int [16] scrollbarWidth
    -= windowW scrollbarWidth
    int [0] zero
    fun MainScrollbar set_position windowW zero
    fun MainScrollbar resize scrollbarWidth h
    int [12] thumbWidth
    fun MainScrollbar set_scrolling_area thumbWidth h
    fun MainScrollbar set_thumb_size thumbWidth h

    all me _ _ image _ _ _ AllImages
    string ["thumb_track"] trackID
    find_by_id_2 AllImages trackID TrackImage
    fun TrackImage resize scrollbarWidth h
    fun me update_scrollbars

    run refreshScrollbarCheck
end

start refreshScrollbarCheck
    if([TerminalSizeY] [0] >)
    index me [0 0] scrollbar MainScrollbar
    int [0] zero
    fun MainScrollbar set_real_scrolling_area zero TerminalSizeY
    += TerminalSizeY h
    int [12] ree12
    double [476] currentThumbHeight
    = currentThumbHeight scrollbarHeight
    value ([window_h]) windowH
    double [1] divide
    = divide windowH
    /= divide TerminalSizeY
    *= currentThumbHeight divide
    fun MainScrollbar set_thumb_size ree12 currentThumbHeight
    fun MainScrollbar scroll_to_the_end
    fun me update_scrollbars
    run keepMinimalSizeOfScrollThumb
    else resetScrollbar
end

start keepMinimalSizeOfScrollThumb
    if([currentThumbHeight] [minScrollbarThumbHeight] <)
    = currentThumbHeight minScrollbarThumbHeight 
    fun MainScrollbar set_thumb_size ree12 currentThumbHeight
    fun me update_scrollbars
end

start resetScrollbar
    index me [0 0] scrollbar MainScrollbar
    int [12] ree12
    double [476] currentThumbHeight
    = currentThumbHeight scrollbarHeight
    fun MainScrollbar set_thumb_size ree12 currentThumbHeight
    fun me update_scrollbars
end


start enter
    triggers key_pressed
    if ([key_pressed 67] [program] ["sleep"] == &&)
    index Cameras [0] camera Camera
    run enter1
end


start enter1
    if ([Camera is_selected])
    index me [0 0] super_editable_text EditableText
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command

    len command commandLength

    string [""] param0
    string [""] param1
    string [""] param2
    string [""] param3
    string [""] param4
    string [""] param5
    string [""] param6
    string [""] param7

    tokenize " " command param0 param1 param2 param3 param4 param5 param6 param7

    in param0 allowedPrograms isAllowed
    string ["_enter"] program
    run saveCommand programCheck
end

start saveCommand
    if ([commandLength] [0] >)
    fun commandHistory set commandNumber command
    string ["~/history.txt"] fileName
    save_text fileName commandHistory
    fun commandHistory push_back ""
    ++ commandNumber
    = currentCommandNumber commandNumber
end

start programCheck
    if ([isAllowed])
    string ["run "] run
    += run param0
    string ["run"] program
    inject_instr me run
    string ["\n"] result
    run printOnTerminal
    else programNotFound
end


start reboot
    reboot
end


start forgor
    int [0] zero
    = commandNumber zero
    = currentCommandNumber zero
    fun commandHistory clear
    string ["history.txt"] fileName
    save_text fileName commandHistory
    string [""] emptyString
    fun commandHistory push_back emptyString
    string [""] program
end

start moveInHistory
    triggers key_pressed
    if([any_key_pressed] [program] ["sleep"] == &&)
    index Cameras [0] camera Camera
    run upArrow downArrow
end

start upArrow
    if ([Camera is_selected] [key_pressed 84] [program] ["sleep"] == [currentCommandNumber] [0] > && && &&)
    index me [0 0] super_editable_text EditableText
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    fun commandHistory set currentCommandNumber command

    -- currentCommandNumber

    fun EditableText cut_unprotected_area
    value ([v commandHistory c currentCommandNumber]) diffCommand
    fun EditableText add_content diffCommand
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end


start downArrow
    if ([Camera is_selected] [key_pressed 85] [program] ["sleep"] == [currentCommandNumber] [commandNumber] < && && &&)
    index me [0 0] super_editable_text EditableText
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    fun commandHistory set currentCommandNumber command

    ++ currentCommandNumber

    fun EditableText cut_unprotected_area
    value ([v commandHistory c currentCommandNumber]) diffCommand
    fun EditableText add_content diffCommand
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end


start programNotFound
    if ([param0] [""] !=)
    string ["\nCommand not found!"] result
    run printOnTerminal
end


start printOnTerminal
    index me [0 0] super_editable_text EditableText
    fun EditableText add_content result
    fun EditableText update
    fun EditableText crop_height_to_text

    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_protected_area historySize
    fun EditableText set_cursor_pos historySize

    value ([window_w]) w
    value ([window_h]) h
    index me [0 0] super_editable_text TerminalTextField
    value ([TerminalTextField size_y]) TerminalSizeY

    run resizeTerminalIfSmall refreshScrollbar
end

start printOnTerminalUnprotected
    index me [0 0] super_editable_text EditableText
    fun EditableText add_content result
    fun EditableText update
    fun EditableText crop_height_to_text

    first EditableText _ _ _ _ content _ history
    len history historySize
    //fun EditableText set_protected_area historySize
    //fun EditableText set_cursor_pos historySize

    value ([window_w]) w
    value ([window_h]) h
    index me [0 0] super_editable_text TerminalTextField
    value ([TerminalTextField size_y]) TerminalSizeY

    run resizeTerminalIfSmall refreshScrollbar
end



start edit
    string ["edit"] program
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField deactivate
    index me [0 0] scrollbar MainScrollbar
    fun MainScrollbar deactivate
    index me [0 1] scrollbar TextEditorScrollbar
    fun TextEditorScrollbar activate
    fun TextEditorScrollbar scroll_to_the_beginning //scroll_to_the_end
    fun me update_scrollbars
    index me [0 1] super_editable_text TextEditor
    fun TextEditor set_content ""
    fun TextEditor set_cursor_pos 0
    fun TextEditor activate
    string [""] fileName
    = fileName param1
    run loadTextFromFile
end

start loadTextFromFile
    if ([exists fileName])
    load_text fileName loadedText
    fun TextEditor set_content loadedText
    len loadedText loadedTextSize
    //fun TextEditor set_cursor_pos loadedTextSize
    fun TextEditor update
    fun TextEditor crop_height_to_text
    run refreshTextEditorScrollbar
    else informFileDoesNotExist
end

start informFileDoesNotExist
    print "Warning: File '"
    print _ _ fileName
    print "' does not exist.\n"
end

start autoUpdateScrollbarForTextEditor
    triggers key_pressing
    if([program] ["edit"] == [any_key_pressing] &&)
    index me [0 1] super_editable_text EditorTextField
    //fun TextEditor update
    fun EditorTextField crop_height_to_text
    run refreshTextEditorScrollbar
end

start refreshTextEditorScrollbar
    index me [0 1] super_editable_text EditorTextField
    value ([EditorTextField size_y]) EditorSizeY
    value ([window_h]) h

    = scrollbarHeight h
    index me [0 1] scrollbar EditorScrollbar
    value ([window_w]) windowW
    int [16] scrollbarWidth
    -= windowW scrollbarWidth
    int [0] zero
    fun EditorScrollbar set_position windowW zero
    fun EditorScrollbar resize scrollbarWidth h
    int [12] thumbWidth
    fun EditorScrollbar set_scrolling_area thumbWidth h

    all me _ _ image _ _ _ AllImages
    string ["thumb_track"] trackID
    find_by_id_2 AllImages trackID TrackImage
    fun TrackImage resize scrollbarWidth h
    fun me update_scrollbars


    -= EditorSizeY h
    run refreshTextEditorScrollbarCheck
end
start refreshTextEditorScrollbarCheck
    if([EditorSizeY] [0] >)
    index me [0 1] scrollbar EditorScrollbar
    int [0] zero
    fun EditorScrollbar set_real_scrolling_area zero EditorSizeY
    += EditorSizeY h
    int [12] ree12
    double [476] currentThumbHeight
    = currentThumbHeight scrollbarHeight
    value ([window_h]) windowH
    double [1] divide
    = divide windowH
    /= divide EditorSizeY
    *= currentThumbHeight divide
    fun EditorScrollbar set_thumb_size ree12 currentThumbHeight
    //fun EditorScrollbar scroll_to_the_end
    fun me update_scrollbars
    run keepMinimalSizeOfTextEditorScrollThumb
    else resetTextEditorScrollbar
end
start keepMinimalSizeOfTextEditorScrollThumb
    if([currentThumbHeight] [minScrollbarThumbHeight] <)
    = currentThumbHeight minScrollbarThumbHeight
    fun EditorScrollbar set_thumb_size ree12 currentThumbHeight
    fun me update_scrollbars
end
start resetTextEditorScrollbar
    index me [0 1] scrollbar EditorScrollbar
    int [12] ree12
    double [476] currentThumbHeight
    = currentThumbHeight scrollbarHeight
    fun EditorScrollbar set_thumb_size ree12 currentThumbHeight
    fun me update_scrollbars
end

start textEditorInsert
    triggers key_pressed
    if([program] ["edit"] == [key_pressed 217] && [key_pressed 9] &&)
    first Layers KERNEL KERNEL super_editable_text TextEditor is_editing_active _ isEditing
    run checkIfInsertPressed
end

start checkIfInsertPressed
    if([isEditing] !)
    reset_keyboard
    index me [0 1] super_editable_text EditableText
    fun EditableText start_editing
end

start triggerEditorExit
    string [""] program
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField activate
    fun TerminalTextField start_editing
    index me [0 1] scrollbar TextEditorScrollbar
    fun TextEditorScrollbar deactivate
    index me [0 0] scrollbar MainScrollbar
    fun MainScrollbar activate
    fun MainScrollbar scroll_to_the_end
    fun me update_scrollbars
    index me [0 1] super_editable_text TextEditor
    fun TextEditor deactivate
    fun TextEditor stop_editing
end

start textEditorExit
    triggers key_pressed
    if([program] ["edit"] == [key_pressed 217] && [key_pressed 17] &&)
    run triggerEditorExit
end

start textEditorSave
    triggers key_pressed
    if([program] ["edit"] == [key_pressed 217] && [key_pressed 19] &&)
    index me [0 1] super_editable_text TextEditor
    first TextEditor _ _ _ _ content _ writtenText
    save_text param1 writtenText
end

start sand
	if([param1] [""] !=)
    load_build me param1
    string [""] program
	else emptyInput1
end
start emptyInput1
	string [""] program
	string ["Error: This instruction requires 1 parameter!\n"] result
	run printOnTerminal
end


start injectFormat
    index me [0 0] super_editable_text EditableText
    double [1.0] r
    double [0.0] g
    double [1.0] b
    double [1.0] a
    string ["cascadia_code"] font 
    fun EditableText inject_format startFragment endFragment r g b a r g b a font
end

start format
    triggers key_pressed
    if([key_pressed 217] && [key_pressed 5] &&)
    index me [0 0] super_editable_text Terminal
    value ([Terminal cursor_pos]) cursorPos
    value ([Terminal second_cursor_pos]) secondCursorPos
    run formatCheck
end 

start formatCheck
    if ([cursorPos] [secondCursorPos] <)
    else formatElseCheck
    int [0] startFragment
    int [0] endFragment
    = startFragment cursorPos
    = endFragment secondCursorPos
    run injectFormat
end

start formatElseCheck
    int [0] startFragment
    int [0] endFragment
    = startFragment secondCursorPos
    = endFragment cursorPos
    run injectFormat
end

/*start lol
    triggers each_iteration
    string ["xd"] param1
    run edit
post
    delete_this_event
end*/

start save_terminal
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField save_to_file param1
    string [""] program
end

start load_terminal
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField load_from_file param1
    string [""] program
end
