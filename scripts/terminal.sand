start onInit
    triggers on_init
    create_display 920 480 1920 1080 false
    //edit_proc draw_hitboxes 1
    edit_proc print_instructions 0
    //edit_proc auto_print_stack 1
    edit_proc draw_text_borders 0
    edit_proc draw_camera_borders 1

    load_bitmap "images/background.png" "background" false true
    load_bitmap "images/error.png" "error" false true
    load_bitmap "images/elephant.jpg" "elephant" false true
    load_bitmap "gui/sand_thumb_track.png" "sand_thumb_track" false true
    load_bitmap "gui/sand_thumb.png" "sand_thumb" false true
	load_bitmap "images/despair.png" "despair" false true

    load_font "fonts/CascadiaCode.ttf" 16 "cascadia_code" true

    load_font "fonts/CascadiaCode-Bold.ttf" 20 "cascadia_code_bold" true

    load_font "fonts/fira_mono.ttf" 20 "fira_mono" true

    run resizeDisplay buildTerminal createWindowTemplate runAfterInit
end

start runAfterInit
    //cd scripts
	run forceRefresh
end

start exitProgram
    triggers key_pressed
    if([key_pressed KEY_LCTRL] [key_pressed KEY_ESC] &&)
    exit
end

start resizeDisplay
    if ([used_os] ["windows"] ==)
    env display_size 640 480
    edit_proc window_size 640 480
    else resizeDisplayLinux
end

start resizeDisplayLinux
    if ([used_os] ["linux"] == [fullscreen] ! &&)
    env display_size 920 480
    edit_proc window_size 920 480
    else resizeDisplayLinuxIfFullscreen
end

start resizeDisplayLinuxIfFullscreen
    if([fullscreen])
    env display_size 1920 1080
end


start buildTerminal
    var KEY_LCTRL 217
    var KEY_ESC 59
    var KEY_SHIFT 215
    var KEY_C 3
    var KEY_TAB 64
    var KEY_L 12
    var KEY_F12 58
    var KEY_ENTER 67
    var KEY_ARROW_UP 84
    var KEY_ARROW_DOWN 85
    var KEY_I 9
    var KEY_Q 17
    var KEY_S 19

    access ww [[display_w]]
    access wh [[display_h]]

    new camera 1 "Desktop" Cam
    fun Cam set_active true
    fun Cam resize ww wh
    fun Cam set_zoom 1.0
    fun Cam set_speed 20
    fun Cam set_key_zoom_in 15
    fun Cam set_key_zoom_out 21
    fun Cam set_zoom_increase 0.02
    fun Cam add_visible_layer "KERNEL"
    fun Cam add_accessible_layer "KERNEL"
    fun Cam set_tint 1.0 1.0 1.0 1.0
    fun Cam set_is_vision_affected_by_mouse false
    fun Cam set_can_zoom_with_mouse false
    fun Cam set_can_move_with_keyboard false
    fun Cam set_can_zoom_with_keyboard false
    fun Cam set_drawing_borders false
    fun Cam focus

    //fun Cam set_can_edit_text false
    fun Cam set_can_move_objects false

    new image me 1 "background" background
    fun background connect_bitmap_via_alias "background"
    fun background resize ww wh
    fun background set_color 0.5 0.5 0.5 0.3
    fun background disable_scrolling

    var terminalColorR "0.988235294"
    var terminalColorG "0.909803922"
    var terminalColorB "0.764705882"
    var terminalColorA "1.0"

    var terminalAccentColorR 0.2
    var terminalAccentColorG 0.0
    var terminalAccentColorB 0.0
    var terminalAccentColorA 1.0

    int editableTextPos [0 0]

    new super_editable_text me 1 "edi" TerminalTextField
    fun TerminalTextField set_pos editableTextPos
    fun TerminalTextField set_size ww wh
    //fun TerminalTextField set_size 884 480
    fun TerminalTextField add_format "cascadia_code" 1
    fun TerminalTextField set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun TerminalTextField set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    fun TerminalTextField set_wrapping "w"
    fun TerminalTextField set_can_be_edited true
    fun TerminalTextField set_can_use_space true
    fun TerminalTextField set_content "Welcome in the SandstormBox terminal!"
    fun TerminalTextField set_input_delay 0.3
    fun TerminalTextField set_repetition_delay 0.05
    fun TerminalTextField set_can_use_tabs false
    fun TerminalTextField set_can_use_enter false
    fun TerminalTextField set_protected_area 37
    fun TerminalTextField set_ignore_vertical_arrows true
    fun TerminalTextField set_can_copy_format true
    fun TerminalTextField start_editing

    var minScrollbarThumbHeight 24

    new image me 1 "thumb" thumb
    fun thumb deactivate
    fun thumb set_pos 2 2
    fun thumb set_size 16 16
    fun thumb resize 12 minScrollbarThumbHeight
    fun thumb connect_bitmap_via_alias "sand_thumb"
    fun thumb disable_scrolling

    new image me 1 "thumb_track" thumbTrack
    fun thumbTrack deactivate
    fun thumbTrack set_size 100 500
    fun thumbTrack resize 16 480
    fun thumbTrack connect_bitmap_via_alias "sand_thumb_track"
    fun thumbTrack disable_scrolling

    var scrollbarHeight 476.0

    new scrollbar me 1 "MainScrollbar" MainScrollbar
    fun MainScrollbar disable_scrolling
    //fun MainScrollbar deactivate
    fun MainScrollbar set_can_be_drawn true
    fun MainScrollbar set_pos 884 0
    fun MainScrollbar set_thumb_position 450 0 //450
    fun MainScrollbar set_thumb_size 12 476
    fun MainScrollbar set_scrolling_area 12 476
    fun MainScrollbar set_real_scrolling_area 0 0
    fun MainScrollbar set_thumb_image_id "thumb"
    fun MainScrollbar set_track_image_id "thumb_track"
    fun MainScrollbar set_mouse_wheel_speed 40.0
    fun MainScrollbar add_camera "Desktop"

    var commandLineHeight 30

    new super_editable_text me 1 "TextEditor" TextEditor
    clone TextEditor TerminalTextField false
    fun TextEditor add_format "cascadia_code_bold" 1
    fun TextEditor set_color 0 0.2 0.74 0.7 1.0 //[0.0 0.7 0.0 1.0]
	fun TextEditor set_accent_color 0 0.0 0.0 0.0 1.0 //[0.0 0.2 0.0 1.0]
    fun TextEditor set_protected_area 0
    fun TextEditor set_can_use_enter true
    fun TextEditor set_content ""
    fun TextEditor set_ignore_vertical_arrows false
    fun TextEditor set_can_use_tabs true
    fun TextEditor deactivate

    new scrollbar me 1 "TextEditorScrollbar" TextEditorScrollbar
    fun TextEditorScrollbar disable_scrolling
    fun TextEditorScrollbar set_can_be_drawn true
    fun TextEditorScrollbar set_pos 884 0
    fun TextEditorScrollbar set_thumb_position 450 0//450
    fun TextEditorScrollbar set_thumb_size 12 476
    fun TextEditorScrollbar set_scrolling_area 12 476
    fun TextEditorScrollbar set_real_scrolling_area 0 0
    fun TextEditorScrollbar set_thumb_image_id "thumb"
    fun TextEditorScrollbar set_track_image_id "thumb_track"
    fun TextEditorScrollbar set_mouse_wheel_speed 40.0
    fun TextEditorScrollbar deactivate
    fun TextEditorScrollbar add_camera "Desktop"

    new particles me 1 "Particles" Particles
    fun Particles set_pos 200 200
    fun Particles set_size 10 10
    fun Particles deactivate
    fun Particles set_block_spawning true
    fun Particles spawn_on_key_release false
    fun Particles set_spawn_rate 100 100
    fun Particles set_spawn_cap 500
    fun Particles set_max_time_to_spawn 0.05
    fun Particles set_basic_speed 0.1 1.0
    fun Particles set_speed 0.1 1.0
    fun Particles set_environment 0.0 0.0
    fun Particles set_environment_speed 0.0 0.0
    fun Particles set_acceleration 0.0 0.0
    fun Particles set_mass 0.4 0.7
    fun Particles set_directional_degree 0.0 360.0
    fun Particles set_rotation_speed 0.0 0.0
    fun Particles set_time_to_negate_rotation 0.0 0.0
    fun Particles set_radius 1.0 1.0
    fun Particles set_time_to_death 0.2 0.2
    fun Particles set_color_intensity 0.8 1.0
    fun Particles set_shape_rotation_speed -2.0 2.0
    fun Particles set_shape 0
    fun Particles set_use_images false
    fun Particles set_drawing_details false
    fun Particles set_is_static false
    //fun Particles bind_key "p"
    //fun Particles add_image "insane"
    

    var program "_enter"
    var param0 ""
    var param1 ""
    var param2 ""
    var param3 ""
    var param4 ""
    var param5 ""
    var param6 ""
    var param7 ""
    var roundingSize 20

    var commandNumber 0
    var currentCommandNumber 0
    vec string commandHistory [""]

    vec string allowedPrograms ["help" "ls" "cls" "cat" "cd" "pwd" "mv" "print" "exit" "reboot" "history" "forgor" "edit" "sand" "sh" "nw" "note" "mover" "fullscreen" "fs" "neofetch" "spawn" "hello" "sq" "cats" "v4" "sel_col" "xd" "wait" "sudo" "allegro" "save_terminal" "load_terminal" "test"]

    var dir "scripts"

    var waitingTime 0

    string fileName "history.txt"
    run loadCommandHistory
end


start loadCommandHistory
    if([exists fileName])
    load_text fileName loadedText
    tokenize "\n" loadedText loadedText
    fun commandHistory clear
    fun commandHistory push_back loadedText
    access newSize [[commandHistory size]]
    -- newSize
    = commandNumber newSize
    = currentCommandNumber newSize
end

start selectTextWithMouse
    triggers mouse_pressing
    if ([mouse_pressing 0])
    index me [0 1] super_editable_text TextField
    access cursorPosY [[TextField cursor_pos_y]]
    index me [0 1] scrollbar Scrollbar
    access scrollShiftY [[Scrollbar scroll_shift_y]]
    -= cursorPosY scrollShiftY
    access windowH [[display_h]]
    double windowLimitYDown -30.0
    += windowLimitYDown windowH
    double windowLimitYUp 10.0
    run moveScrollbarBySelectingText
end
start selectTextWithKeys
    triggers key_pressing
    index me [0 1] super_editable_text TextField
    access cursorPosY [[TextField cursor_pos_y]]
    index me [0 1] scrollbar Scrollbar
    access scrollShiftY [[Scrollbar scroll_shift_y]]
    -= cursorPosY scrollShiftY
    access windowH [[display_h]]
    double windowLimitYDown -20.0
    += windowLimitYDown windowH
    double windowLimitYUp 0.0
    run moveScrollbarBySelectingText
end
start moveScrollbarBySelectingText
    if ([TextField is_editing_active] [cursorPosY] [windowLimitYDown] > &&)
    index me [0 1] scrollbar Scrollbar
    fun Scrollbar scroll_by_distance 0 8
    fun me update_scrollbars
    else moveScrollbarBySelectingTextUp
end
start moveScrollbarBySelectingTextUp
    if ([TextField is_editing_active] [cursorPosY] [windowLimitYUp] < &&)
    index me [0 1] scrollbar Scrollbar
    fun Scrollbar scroll_by_distance 0 -8
    fun me update_scrollbars
end

start spawnParticles
    //triggers each_iteration
    //triggers key_pressing
    //if ([any_key_pressing])
    /*index me [0 0] particles Particles
    index me [0 1] super_editable_text TextField
    access cursorPos [[TextField cursor_pos_x] [TextField cursor_pos_y]]
    index me [0 1] scrollbar Scrollbar
    access scrollShift [[Scrollbar scroll_shift_x] [Scrollbar scroll_shift_y]]
    -= cursorPos scrollShift
    fun Particles set_pos cursorPos
    fun Particles allow_spawning*/
end


start createWindowTemplate
    new layer 1 "WindowLayer" WindowLayer
    fun WindowLayer deactivate
    access newLayerID [[WindowLayer id]]

    new camera 1 "WindowCamera" WindowCamera
    fun WindowCamera set_pos 0 0
    fun WindowCamera set_active true
    fun WindowCamera resize 640 480
    fun WindowCamera set_zoom 1.0
    fun WindowCamera set_speed 20
    fun WindowCamera set_key_zoom_in 15
    fun WindowCamera set_key_zoom_out 21
    fun WindowCamera set_zoom_increase 0.02
    fun WindowCamera bind_keys 15 21 13 9 12 11 10
    fun WindowCamera set_tint 1.0 1.0 1.0 1.0
    fun WindowCamera set_drawing_borders false
    fun WindowCamera set_can_be_modified_by_mouse true
    fun WindowCamera set_is_vision_affected_by_mouse true
    //fun WindowCamera add_visible_layer "WindowLayer"
    //fun WindowCamera add_accessible_layer "WindowLayer"
    fun WindowCamera set_grabbing_area_size 540 50
    fun WindowCamera pin_to_camera "Desktop"
    fun WindowCamera activate_pin
    fun WindowCamera set_min_size 300 34
    fun WindowCamera set_keep_inside_screen false
    fun WindowCamera deactivate
    fun WindowCamera forbid_drawing_object_borders

    new object WindowLayer 1 "WindowObject" NewWindowObject
    //fun NewWindowObject set_can_be_selected true
    fun NewWindowObject disable_scrolling
    fun NewWindowObject set_can_be_moved_with_mouse false
    bind NewWindowObject ["scripts/windowTemplate.sand"]
    build NewWindowObject true

    new variable NewWindowObject 1 "cameraID" objectsCameraID
    fun objectsCameraID set_string "WindowCamera"

    new variable NewWindowObject 1 "isMaxed" isMaxed
    fun isMaxed set_bool false
    new variable NewWindowObject 1 "sizeX" sizeX
    fun sizeX set_double 640
    new variable NewWindowObject 1 "sizeY" sizeY
    fun sizeY set_double 480
    new variable NewWindowObject 1 "posX" posX
    fun posX set_double 0.0
    new variable NewWindowObject 1 "posY" posY
    fun posY set_double 0
    new variable NewWindowObject 1 "isBorderless" isBorderless
    fun isBorderless set_bool false

    new variable NewWindowObject 1 "delete" newVal
    fun newVal set_bool false

    new variable NewWindowObject 1 "has_friends" newVal
    fun newVal set_bool false

    new variable NewWindowObject 1 "deleted_friends" newVal
    fun newVal set_bool false

    new primitives NewWindowObject 1 "background" border1
    fun border1 set_type "filled_rectangle"
    fun border1 add_point 0.0 0.0
    fun border1 add_point 640 480
    fun border1 set_color 0.0 0.0 0.0 1.0
    fun border1 set_size 640 480
    fun border1 update_with_size

    new primitives NewWindowObject 1 "toolbar" border2
    clone border2 border1 false
    fun border2 set_color 0.109 0.537 0.2039 1.0
    fun border2 set_size 640 30
    fun border2 update_with_size

    new primitives NewWindowObject 1 "border" border3
    clone border3 border1 false
    fun border3 set_type "rectangle"
    fun border3 set_color 0.109 0.537 0.2039 1.0
    fun border3 set_pos 2 2
    fun border3 set_size 636 476
    fun border3 set_thickness 5.0
    fun border3 update_with_size

    new primitives NewWindowObject 1 "exitButton" exitButton
    fun exitButton set_type "filled_circle"
    fun exitButton add_point 0.0 0.0
    fun exitButton add_point 5 5
    fun exitButton set_color 1.0 0.0 0.0 1.0
    fun exitButton set_pos 620 15
    fun exitButton set_size 20 20
    fun exitButton update_with_size

    new collision NewWindowObject 1 "ExitCollision" ExitCollision
    fun ExitCollision set_pos 620 15
    fun ExitCollision set_size 10 10
    fun ExitCollision set_is_circle true

    new primitives NewWindowObject 1 "MaxButton" MaxButton
    clone MaxButton exitButton false
    fun MaxButton set_pos 590 15
    fun MaxButton set_color 1.0 1.0 0.0 1.0

    new collision NewWindowObject 1 "MaxCollision" MaxCollision
    fun MaxCollision set_pos 590 15
    fun MaxCollision set_size 10 10
    fun MaxCollision set_is_circle true

    new primitives NewWindowObject 1 "minimizeButton" minimizeButton
    clone minimizeButton exitButton false
    fun minimizeButton set_pos 560 15
    fun minimizeButton set_color 0.0 1.0 0.0 1.0

    new collision NewWindowObject 1 "MinCollision" MinCollision
    fun MinCollision set_pos 560 15
    fun MinCollision set_size 10 10
    fun MinCollision set_is_circle true

    new super_text NewWindowObject 1 "title" title
    fun title set_pos 10 2
    fun title set_size 400 50
    fun title add_format "cascadia_code_bold" 8
    fun title set_color 0 1.0 1.0 1.0 1.0
    fun title set_wrapping "n"
    fun title set_content "Template Window"
    fun title disable_scrolling
end


start nw
    run spawnNewWindow
end


start spawnNewWindow
    all Cameras _ camera _ Cameras
    find_by_id_2 Cameras "WindowCamera" TemplateCamera
    all Layers _ _ _ _ _ _ Layers
    find_by_id_2 Layers "WindowLayer" TemplateLayer

    new layer 1 param1 NewWindowLayer
    clone NewWindowLayer TemplateLayer false
    access newLayerID [[NewWindowLayer id]]
    fun NewWindowLayer activate

    index NewWindowLayer [0 0 0] super_text Title
    fun Title set_content param1

    new camera 1 param1 NewWindowCamera
    clone NewWindowCamera TemplateCamera false
    access newCameraID [[NewWindowCamera id]]
    fun NewWindowCamera activate
    fun NewWindowCamera add_visible_layer newLayerID
    fun NewWindowCamera add_accessible_layer newLayerID
    fun NewWindowCamera set_drawing_borders false
    index NewWindowLayer [0 0 0] variable objectsCameraID
    = objectsCameraID newCameraID
    = program ""
end


start note
    int NewWindowLayer 0
    string fileName ""
    = fileName param1
    = param1 "Note"
    run spawnNewWindow spawnNotepad
end
start spawnNotepad
    index me [0 1] super_editable_text Editable
    index NewWindowLayer [0 0] object Object
    index NewWindowLayer [0 0 0] primitives Background
    fun Background set_color 0.0 0.0 0.0 1.0
    new super_editable_text Object 1 "Notepad" TextEditor
    clone TextEditor Editable false
    fun TextEditor set_pos 5 30
    fun TextEditor set_size 640 480
    fun TextEditor set_color 0 1.0 0.0 0.0 1.0
    fun TextEditor set_wrapping "n"
    fun TextEditor set_content ""
    fun TextEditor activate
    fun Object set_size 640 480
    bind Object ["scripts/notepad.sand"]
    build Object true
    run loadTextFromFile
end


start mover
    int NewWindowLayer 0
    string selectedLayerID ""
    = selectedLayerID param1
    = param1 "Mover"
    int NewWindowCamera 0
    run spawnNewWindow spawnMover
end
start spawnMover
    index me [0 1] super_editable_text Editable
    index NewWindowLayer [0 0] object NewObject
    first NewObject _ _ variable has_friends bool _ has_friends
    = has_friends true
    index NewWindowLayer [0 0 0] primitives Background
    fun Background set_color 0.0 0.0 0.0 1.0
    //access selectedLayerID [[my_layer id]]
    access windowCameraID [[NewWindowCamera id]]
    new camera 1 "insideCamera" InsideCamera
    fun InsideCamera activate
    fun InsideCamera add_visible_layer selectedLayerID
    fun InsideCamera add_accessible_layer selectedLayerID
    fun InsideCamera pin_to_camera windowCameraID
    fun InsideCamera activate_pin
    fun InsideCamera set_relative_position 5 30
    fun InsideCamera resize 630 440
    //fun InsideCamera set_can_move_objects true
    fun InsideCamera set_can_edit_text false
    fun InsideCamera set_min_size 0 0
    fun InsideCamera allow_drawing_object_borders 

    access newCameraID [[InsideCamera id]]

    new variable NewObject 1 "insideCameraID" cameraID
    fun cameraID set_string newCameraID

    //bind NewObject ["scripts/mover.sand"]
    //build_subset NewObject false
    load_build NewObject ["scripts/mover.sand"]
end


start interrupt
    triggers key_pressed
    if ([key_pressed KEY_SHIFT] [key_pressed KEY_C] &&)
    
    = program ""
    string result "^C\n"
    run printOnTerminal
end

start autoComplete
    triggers key_pressed
    if ([key_pressed KEY_TAB] [program] ["sleep"] == &&)
    index Cameras [0] camera Camera
    run autoComplete1
end

start autoComplete1
    if ([Camera is_selected])
    index me [0 0] super_editable_text EditableText
    fun EditableText set_last_color 1.0 0.8 0.0 1.0
    fun EditableText set_last_accent_color 0.0 0.0 0.0 1.0
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    tokenize " " command params
    run autoCompletePrograms
end

start autoCompleteFiles
    access lastParameter [[params back]]
    count "/" lastParameter depth
    ++ depth
    ls "" files true depth
    tokenize " " files filesTokenized
    similar lastParameter filesTokenized false completes
    similar lastParameter filesTokenized true commonPart
    string result "\n"
    int i 0
    run autoCompleteCheckIfDirectory replaceWithAutoComplete
end

start autoCompleteCheckIfDirectory
    if([completes size] [1] == [is_directory completes] &&)
    else autoCompleteCheckIfFile
    print _ completes completes "/"
end

start autoCompleteCheckIfFile
    if([completes size] [1] ==)
    print _ completes completes " "
end

start autoCompletePrograms
    if([params size] [1] ==)
    else autoCompleteFiles
    similar command allowedPrograms false completes
    similar command allowedPrograms true commonPart
    string lastParameter ""
    = lastParameter command
    string result "\n"
    int i 0
    run autoCompleteProgramsIfOne replaceWithAutoComplete
end

start autoCompleteProgramsIfOne
    if([completes size] [1] ==)
    print _ completes completes " "
end

start replaceWithAutoComplete
    if ([completes size] [1] ==)
    else printPossibleCompletes
    fun EditableText cut_unprotected_area
    fun params pop_back
    fun params push_back completes
    print " " autocompletedText params
    //index completes [0] value instance
    fun EditableText add_content autocompletedText
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end

start createPrompt
    //Cool way of creating prompt is not possible until extended ascii characters are not handled well in the editable text module.
    += result "~/"      //"┌/"
    pwd workingDir
    += result workingDir
    += result "\n$"     //"\n└─$"
end

start putNewLine
    += result "\n"
end

start addAllCompletes true
    if ([i] [completes size] <)
    index completes [i] value instance
    += result instance
    += result " "
    ++ i
end

start rstTermBuff
    fun EditableText set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun EditableText set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    string result ""
end

start printPrompt
    string result ""
    index me [0 0] super_editable_text EditableText
    run rstTermBuff createPrompt printOnTerminal colorNormalText
end

start addCommonPartToCommand
    if([completes size] [0] >)
    len lastParameter lastParameterLength
    len commonPart commonPartLength
    -= commonPartLength lastParameterLength
    substr commonPart lastParameterLength commonPartLength commonPart
    += command commonPart
end

start printPossibleCompletes
    if([completes size] [0] >)
    run addAllCompletes putNewLine printOnTerminal printPrompt addCommonPartToCommand rewriteLastCommand
end

start rewriteLastCommand
    fun EditableText add_content command
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end


start controler
    triggers each_iteration
    if ([program] [""] ==)
    index me [0 0] super_editable_text EditableText
    fun EditableText set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun EditableText set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    = program "sleep"
    string result ""
    run createPrompt printOnTerminal colorNormalText
end


start clearOnShortcut
    triggers key_pressed
    if ([program] ["sleep"] == [key_pressed KEY_LCTRL] && [key_pressed KEY_L] &&)
    index Cameras [0] camera Camera
    run clearOnShortcutIfFocused
end

start clearOnShortcutIfFocused
    if ([Camera is_selected])
    run cls
end

start controlerWithEnter
    triggers each_iteration
    if ([program] ["_enter"] ==)
    index me [0 0] super_editable_text EditableText
    fun EditableText set_last_color terminalColorR terminalColorG terminalColorB terminalColorA
    fun EditableText set_last_accent_color terminalAccentColorR terminalAccentColorG terminalAccentColorB terminalAccentColorA
    = program "sleep"
    string result "\n"
    run createPrompt printOnTerminal colorNormalText
end

start colorNormalText
    fun EditableText set_last_color 0.86 0.85 0.86 1.0
    fun EditableText set_last_accent_color 0.0 0.0 0.0 1.0
    string result " "
    run printOnTerminal
end



start fs_click false
    triggers key_pressed
    if ([key_pressed KEY_F12])
    run setFullscreen
end

start fullscreen
    = program ""
    run setFullscreen
end

start fs
    = program ""
    run setFullscreen
end

start setFullscreen
    if ([fullscreen] !)
    env fullscreen 1
    else fs_else
end

start fs_else
    env fullscreen 0
end

start refresh
    triggers on_display_resize
    run forceRefresh
end

start forceRefresh
    access w [[display_w]]
    access h [[display_h]]
    index Cameras [0] camera Cam0
    fun Cam0 resize w h
    index me [0 0] image background
    fun background resize w h

    index me [0 1] super_editable_text EditProgramTextField
    access EditorSizeY [[EditProgramTextField size_y]]
    int textHeight 476
    = textHeight h
    -= textHeight commandLineHeight
    fun EditProgramTextField set_size w h
    fun EditProgramTextField update
    fun EditProgramTextField crop_height_to_text

    index me [0 0] super_editable_text TerminalTextField
    access TerminalSizeY [[TerminalTextField size_y]]
    fun TerminalTextField set_size w TerminalSizeY
    fun TerminalTextField update
    fun TerminalTextField crop_height_to_text
    access TerminalSizeY [[TerminalTextField size_y]]
    run resizeTerminalIfSmall refreshScrollbar refreshTextEditorScrollbarIfEditing
end

start refreshTextEditorScrollbarIfEditing
    if ([program] ["edit"] ==)
    run refreshTextEditorScrollbar
end

start resizeTerminalIfSmall
    if([TerminalSizeY] [h] < )
    fun TerminalTextField set_size w h
end

start refreshScrollbar
    index me [0 0] super_editable_text TerminalTextField
    access TerminalSizeY [[TerminalTextField size_y]]
    access h [[display_h]]
    -= TerminalSizeY h

    = scrollbarHeight h
    index me [0 0] scrollbar MainScrollbar
    access windowW [[display_w]]
    int scrollbarWidth 16
    -= windowW scrollbarWidth
    fun MainScrollbar set_pos windowW 0
    fun MainScrollbar resize scrollbarWidth h
    int thumbWidth 12
    fun MainScrollbar set_scrolling_area thumbWidth h
    fun MainScrollbar set_thumb_size thumbWidth h

    all me _ _ image _ _ _ AllImages
    find_by_id_2 AllImages "thumb_track" TrackImage
    fun TrackImage resize scrollbarWidth h
    fun me update_scrollbars

    run refreshScrollbarCheck
end

start refreshScrollbarCheck
    if([TerminalSizeY] [0] >)
    index me [0 0] scrollbar MainScrollbar
    fun MainScrollbar set_real_scrolling_area 0 TerminalSizeY
    += TerminalSizeY h
    double currentThumbHeight 476.0
    = currentThumbHeight scrollbarHeight
    access windowH [[display_h]]
    double divide 1.0
    = divide windowH
    /= divide TerminalSizeY
    *= currentThumbHeight divide
    fun MainScrollbar set_thumb_size 12 currentThumbHeight
    fun MainScrollbar scroll_to_the_end
    fun me update_scrollbars
    run keepMinimalSizeOfScrollThumb
    else resetScrollbar
end

start keepMinimalSizeOfScrollThumb
    if([currentThumbHeight] [minScrollbarThumbHeight] <)
    = currentThumbHeight minScrollbarThumbHeight 
    fun MainScrollbar set_thumb_size 12 currentThumbHeight
    fun me update_scrollbars
end

start resetScrollbar
    index me [0 0] scrollbar MainScrollbar
    double currentThumbHeight 476.0
    = currentThumbHeight scrollbarHeight
    fun MainScrollbar set_thumb_size 12 currentThumbHeight
    fun me update_scrollbars
end


start enter
    triggers key_pressed
    if ([key_pressed KEY_ENTER] [program] ["sleep"] == &&)
    index Cameras [0] camera Camera
    run enter1
end


start enter1
    if ([Camera is_selected])
    index me [0 0] super_editable_text EditableText
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command

    len command commandLength

    = param0 ""
    = param1 ""
    = param2 ""
    = param3 ""
    = param4 ""
    = param5 ""
    = param6 ""
    = param7 ""

    tokenize " " command param0 param1 param2 param3 param4 param5 param6 param7

    in param0 allowedPrograms isAllowed
    = program "_enter"
    run saveCommand programCheck
end

start saveCommand
    if ([commandLength] [0] >)
    fun commandHistory set commandNumber command
    save_text "~/history.txt" commandHistory "\n"
    fun commandHistory push_back ""
    ++ commandNumber
    = currentCommandNumber commandNumber
end

start programCheck
    if ([isAllowed])
    string run "run "
    += run param0
    = program "run"
    inject_instr me run
    string result "\n"
    run printOnTerminal
    else programNotFound
end


start reboot
    reboot
end


start forgor
    = commandNumber 0
    = currentCommandNumber 0
    fun commandHistory clear
    save_text "history.txt" commandHistory
    fun commandHistory push_back ""
    = program ""
end

start moveInHistory
    triggers key_pressed
    if([program] ["sleep"] ==)
    index Cameras [0] camera Camera
    run upArrow downArrow
end

start upArrow
    if ([Camera is_selected] [key_pressed KEY_ARROW_UP] [program] ["sleep"] == [currentCommandNumber] [0] > && && &&)
    index me [0 0] super_editable_text EditableText
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    fun commandHistory set currentCommandNumber command

    -- currentCommandNumber

    fun EditableText cut_unprotected_area
    access diffCommand [[v commandHistory c currentCommandNumber]]
    fun EditableText add_content diffCommand
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end


start downArrow
    if ([Camera is_selected] [key_pressed KEY_ARROW_DOWN] [program] ["sleep"] == [currentCommandNumber] [commandNumber] < && && &&)
    index me [0 0] super_editable_text EditableText
    first EditableText _ _ _ _ content _ userInput
    first EditableText _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    fun commandHistory set currentCommandNumber command

    ++ currentCommandNumber

    fun EditableText cut_unprotected_area
    access diffCommand [[v commandHistory c currentCommandNumber]]
    fun EditableText add_content diffCommand
    fun EditableText update
    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos historySize
end


start programNotFound
    if ([param0] [""] !=)
    string result "\nCommand not found!"
    run printOnTerminal
end


start printOnTerminal
    index me [0 0] super_editable_text EditableText
    fun EditableText add_content result
    fun EditableText update
    fun EditableText crop_height_to_text

    first EditableText _ _ _ _ content _ history
    len history historySize
    fun EditableText set_protected_area historySize
    fun EditableText set_cursor_pos historySize

    access w [[display_w]]
    access h [[display_h]]
    index me [0 0] super_editable_text TerminalTextField
    access TerminalSizeY [[TerminalTextField size_y]]

    run resizeTerminalIfSmall refreshScrollbar
end

start printOnTerminalUnprotected
    index me [0 0] super_editable_text EditableText
    fun EditableText add_content result
    fun EditableText update
    fun EditableText crop_height_to_text

    first EditableText _ _ _ _ content _ history
    len history historySize
    //fun EditableText set_protected_area historySize
    //fun EditableText set_cursor_pos historySize

    access w [[display_w]]
    access h [[display_h]]
    index me [0 0] super_editable_text TerminalTextField
    access TerminalSizeY [[TerminalTextField size_y]]

    run resizeTerminalIfSmall refreshScrollbar
end



start edit
    = program "edit"
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField deactivate
    index me [0 0] scrollbar MainScrollbar
    fun MainScrollbar deactivate
    index me [0 1] scrollbar TextEditorScrollbar
    fun TextEditorScrollbar activate
    fun TextEditorScrollbar scroll_to_the_beginning //scroll_to_the_end
    fun me update_scrollbars
    index me [0 1] super_editable_text TextEditor
    fun TextEditor set_content ""
    fun TextEditor set_cursor_pos 0
    fun TextEditor activate
    string fileName ""
    = fileName param1
    run loadTextFromFile
end

start loadTextFromFile
    if ([exists fileName])
    load_text fileName loadedText
    fun TextEditor set_content loadedText
    len loadedText loadedTextSize
    //fun TextEditor set_cursor_pos loadedTextSize
    fun TextEditor update
    fun TextEditor crop_height_to_text
    run refreshTextEditorScrollbar
    else informFileDoesNotExist
end

start informFileDoesNotExist
    print "Warning: File '"
    print _ _ fileName
    print "' does not exist.\n"
end

start autoUpdateScrollbarForTextEditor
    triggers key_pressing
    if([program] ["edit"] ==)
    index me [0 1] super_editable_text EditorTextField
    //fun TextEditor update
    fun EditorTextField crop_height_to_text
    run refreshTextEditorScrollbar
end

start refreshTextEditorScrollbar
    index me [0 1] super_editable_text EditorTextField
    access EditorSizeY [[EditorTextField size_y]]
    access h [[display_h]]

    = scrollbarHeight h
    index me [0 1] scrollbar EditorScrollbar
    access windowW [[display_w]]
    int scrollbarWidth 16
    -= windowW scrollbarWidth
    fun EditorScrollbar set_pos windowW 0
    fun EditorScrollbar resize scrollbarWidth h
    int thumbWidth 12
    fun EditorScrollbar set_scrolling_area thumbWidth h

    all me _ _ image _ _ _ AllImages
    find_by_id_2 AllImages "thumb_track" TrackImage
    fun TrackImage resize scrollbarWidth h
    fun me update_scrollbars

    -= EditorSizeY h
    run refreshTextEditorScrollbarCheck
end
start refreshTextEditorScrollbarCheck
    if([EditorSizeY] [0] >)
    index me [0 1] scrollbar EditorScrollbar
    fun EditorScrollbar set_real_scrolling_area 0 EditorSizeY
    += EditorSizeY h
    
    double currentThumbHeight 476.0
    = currentThumbHeight scrollbarHeight
    access windowH [[display_h]]
    double divide 1.0
    = divide windowH
    /= divide EditorSizeY
    *= currentThumbHeight divide
    fun EditorScrollbar set_thumb_size 12 currentThumbHeight
    //fun EditorScrollbar scroll_to_the_end
    fun me update_scrollbars
    run keepMinimalSizeOfTextEditorScrollThumb
    else resetTextEditorScrollbar
end
start keepMinimalSizeOfTextEditorScrollThumb
    if([currentThumbHeight] [minScrollbarThumbHeight] <)
    = currentThumbHeight minScrollbarThumbHeight
    fun EditorScrollbar set_thumb_size 12 currentThumbHeight
    fun me update_scrollbars
end
start resetTextEditorScrollbar
    index me [0 1] scrollbar EditorScrollbar
    
    double currentThumbHeight 476.0
    = currentThumbHeight scrollbarHeight
    fun EditorScrollbar set_thumb_size 12 currentThumbHeight
    fun me update_scrollbars
end

start textEditorInsert
    triggers key_pressed
    if([program] ["edit"] == [key_pressed KEY_LCTRL] && [key_pressed KEY_I] &&)
    first Layers KERNEL KERNEL super_editable_text TextEditor is_editing_active _ isEditing
    run checkIfInsertPressed
end

start checkIfInsertPressed
    if([isEditing] !)
    reset_keyboard
    index me [0 1] super_editable_text EditableText
    fun EditableText start_editing
end

start triggerEditorExit
    = program ""
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField activate
    fun TerminalTextField start_editing
    index me [0 1] scrollbar TextEditorScrollbar
    fun TextEditorScrollbar deactivate
    index me [0 0] scrollbar MainScrollbar
    fun MainScrollbar activate
    fun MainScrollbar scroll_to_the_end
    fun me update_scrollbars
    index me [0 1] super_editable_text TextEditor
    fun TextEditor deactivate
    fun TextEditor stop_editing
end

start textEditorExit
    triggers key_pressed
    if([program] ["edit"] == [key_pressed KEY_LCTRL] && [key_pressed KEY_Q] &&)
    run triggerEditorExit
end

start textEditorSave
    triggers key_pressed
    if([program] ["edit"] == [key_pressed KEY_LCTRL] && [key_pressed KEY_S] &&)
    index me [0 1] super_editable_text TextEditor
    first TextEditor _ _ _ _ content _ writtenText
    save_text param1 writtenText
end

start sand
	if([param1] [""] !=)
    load_build me param1
    = program ""
	else emptyInput1
end
start emptyInput1
	= program ""
	string result "Error: This instruction requires 1 parameter!\n"
	run printOnTerminal
end


start injectFormat
    index me [0 0] super_editable_text EditableText
    string font "cascadia_code"
    fun EditableText inject_format startFragment endFragment 1.0 0.0 1.0 1.0  1.0 0.0 1.0 1.0 font
end

start format
    triggers key_pressed
    if([key_pressed KEY_LCTRL] && [key_pressed 5] &&)
    index me [0 0] super_editable_text Terminal
    access cursorPos [[Terminal cursor_pos]]
    access secondCursorPos [[Terminal second_cursor_pos]]
    run formatCheck
end 

start formatCheck
    if ([cursorPos] [secondCursorPos] <)
    else formatElseCheck
    int startFragment 0
    int endFragment 0
    = startFragment cursorPos
    = endFragment secondCursorPos
    run injectFormat
end

start formatElseCheck
    int startFragment 0
    int endFragment 0
    = startFragment secondCursorPos
    = endFragment cursorPos
    run injectFormat
end

/*start lol
    triggers each_iteration
    string param1 "xd"
    run edit
after
    delete_this_event
end*/

start save_terminal
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField save_to_file param1
    = program ""
end

start load_terminal
    index me [0 0] super_editable_text TerminalTextField
    fun TerminalTextField load_from_file param1
    = program ""
end
