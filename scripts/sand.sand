start onInit
    triggers on_init
    //edit_proc draw_hitboxes 1
    //edit_proc print_instructions 1
    //edit_proc auto_print_stack 1
    //edit_proc draw_text_borders 1

    edit_proc draw_camera_borders 1

    load_bitmap "images/background2.png" background2 false true
    load_bitmap "images/background3.png" background3 false true
    load_bitmap "images/amongus1.png" amongus1 false true
    load_bitmap "images/amongus2.png" amongus2 false true
    load_bitmap "images/amongus3.png" amongus3 false true
    load_bitmap "images/terry.png" terry false true
    load_bitmap "images/arch.jpg" arch false true
    load_bitmap "images/cobblestone.png" cobblestone false true
    load_bitmap "images/elephant.jpg" elephant false true
    load_bitmap "gui/thumb_track_h3.png" thumb_track_h3 false true
    load_bitmap "gui/thumb_h3.png" thumb_h3 false true


    string ["fonts/CascadiaCode.ttf"] path
    int [20] size
    string ["cascadia_code"] name
    load_font path size name true

    string ["fonts/CascadiaCode-Bold.ttf"] path
    int [20] size
    string ["cascadia_code_bold"] name
    load_font path size name true

    string ["fonts/fira_mono.ttf"] path
    int [20] size
    string ["fira_mono"] name
    load_font path size name true

    run resizeDisplay buildTerminal createWindowTemplate
end


start resizeDisplay
    if ([used_os] [string "windows"] ==)
    //env window_size 1366 568
    //edit_proc window_size 1366 568
    edit_proc window_size 1920 1080
    env window_size 1366 768//640 480//1920 1080
    else resizeDisplayLinux
end

start resizeDisplayLinux
    if ([used_os] [string "linux"] ==)
    //env window_size 1366 568
    //edit_proc window_size 1366 568
    //env window_size 800 300
    env window_size 900 480
    edit_proc window_size 1920 1080
end


start buildTerminal
    value ([window_w]) ww
    value ([window_h]) wh

    new camera l 1 _ _ Cam
    //fun Cam set_position int [100 100]
    fun Cam set_id string [Desktop]
    fun Cam set_active bool [true]
    fun Cam resize c ww c wh
    fun Cam set_zoom double [1.0]
    fun Cam set_speed double [20]
    fun Cam set_key_zoom_in int [15]
    fun Cam set_key_zoom_out int [21]
    fun Cam set_zoom_increase double [0.02]
    fun Cam add_visible_layer string [KERNEL]
    fun Cam add_accessible_layer string [KERNEL]
    fun Cam set_tint double [1.0 1.0 1.0 1.0]
    fun Cam set_is_vision_affected_by_mouse bool [1]
    fun Cam set_can_zoom_with_mouse bool [0]
    fun Cam set_can_move_with_keyboard bool [0]
    fun Cam set_can_zoom_with_keyboard bool [0]
    fun Cam set_drawing_borders bool [0]
    fun Cam focus

    //fun Cam set_can_edit_text bool [false]
    fun Cam set_can_move_objects bool [false]

    new image c me 1 _ _ background
    fun background connect_bitmap_via_alias string [background2]
    fun background resize c ww c wh
    fun background set_color double [0.5 0.5 0.5 0.3]
    fun background add_to_the_interface

    int [0 0] editableTextPos

    new super_editable_text c me 1 _ _ TerminalTextField
    fun TerminalTextField set_id string [edi]
    fun TerminalTextField set_position c editableTextPos
    fun TerminalTextField set_size c ww c wh
    //fun TerminalTextField set_size int [874 480]
    fun TerminalTextField add_format string [cascadia_code] int [1]
    fun TerminalTextField set_color int [0] double [1.0 0.0 0.0 1.0]
    fun TerminalTextField set_wrapping string [w]
    fun TerminalTextField set_can_be_edited bool [true]
    fun TerminalTextField set_can_use_space bool [true]
    fun TerminalTextField set_content string ["Welcome in Sandstorm Box terminal!"]
    fun TerminalTextField set_input_delay double [0.3]
    fun TerminalTextField set_repetition_delay double [0.05]
    fun TerminalTextField set_can_use_tabs bool [false]
    fun TerminalTextField set_can_use_enter bool [false]
    fun TerminalTextField set_protected_area int [37]
    fun TerminalTextField set_ignore_vertical_arrows bool [true]
    fun TerminalTextField set_can_copy_format bool [true]
    fun TerminalTextField start_editing
    fun TerminalTextField allow_scrolling
    fun TerminalTextField add_to_the_interface

    new super_editable_text c me 1 _ _ TextEditor
    clone TextEditor TerminalTextField
    fun TextEditor add_format string [cascadia_code_bold] int [1]
    fun TextEditor set_color int [0] double [1.0 1.0 0.0 1.0]
    fun TextEditor set_id string [TextEditor]
    fun TextEditor set_protected_area int [0]
    fun TextEditor set_can_use_enter bool [1]
    fun TextEditor set_content string [""]
    fun TextEditor set_ignore_vertical_arrows bool [false]
    fun TextEditor set_can_use_tabs bool [true]
    fun TextEditor deactivate

    /*new particles c me 1 _ _ Particles
    fun Particles set_position int [200 200]
    fun Particles set_size int [10 10]
    fun Particles activate
    fun Particles set_block_spawning bool [true]
    fun Particles spawn_on_key_release bool [false]
    fun Particles set_spawn_rate int [100 100]
    fun Particles set_spawn_cap int [500]
    fun Particles set_max_time_to_spawn double [0.05]
    fun Particles set_basic_speed double [0.1 10.0]
    fun Particles set_speed double [0.1 10.0]
    fun Particles set_environment double [0.0 0.0]
    fun Particles set_environment_speed double [0.0 0.0]
    fun Particles set_acceleration double [0.0 0.0]
    fun Particles set_mass double [0.4 0.7]
    fun Particles set_directional_degree double [0.0 360.0]
    fun Particles set_rotation_speed double [0.0 0.0]
    fun Particles set_time_to_negate_rotation double [0.0 0.0]
    fun Particles set_radius double [5.0 5.0]
    fun Particles set_time_to_death double [0.2 0.5]
    fun Particles set_color_intensity double [0.8 1.0]
    fun Particles set_shape_rotation_speed double [-2.0 2.0]
    fun Particles set_shape int [0]
    fun Particles set_use_images bool [false]
    fun Particles set_drawing_details bool [false]
    fun Particles set_is_static bool [false]
    //fun Particles bind_key string [p]
    //fun Particles add_image string [insane]
    */

    new image c me 1 _ _ thumb
    fun thumb set_id string [thumb]
    fun thumb deactivate
    fun thumb set_position int [2 2]
    fun thumb set_size int [16 16]
    fun thumb resize int [26 26]
    fun thumb connect_bitmap_via_alias string [thumb_h3]
    fun thumb add_to_the_interface

    new image c me 1 _ _ thumbTrack
    fun thumbTrack set_id string [thumb_track]
    fun thumbTrack deactivate
    fun thumbTrack set_size int [100 500]
    fun thumbTrack resize int [30 480]
    fun thumbTrack connect_bitmap_via_alias string [thumb_track_h3]
    fun thumbTrack add_to_the_interface

    new scrollbar c me 1 _ _ MainScrollbar
    fun MainScrollbar add_to_the_interface
    fun MainScrollbar deactivate
    fun MainScrollbar set_id string [MainScrollbar]
    fun MainScrollbar set_position int [874 0]
    fun MainScrollbar set_thumb_position int [0 0]//450]
    fun MainScrollbar set_thumb_size double [26 476]
    fun MainScrollbar set_scrolling_area double [26 476]
    fun MainScrollbar set_real_scrolling_area double [0 0]
    fun MainScrollbar set_thumb_image_id string [thumb]
    fun MainScrollbar set_track_image_id string [thumb_track]

    var string "_enter" program
    var string "" param0
    var string "" param1
    var string "" param2
    var string "" param3
    var string "" param4
    var string "" param5
    var string "" param6
    var string "" param7
    var int 20 roundingSize

    var string "1.0" terminalColorR
    var string "0.0" terminalColorG
    var string "0.0" terminalColorB
    var string "1.0" terminalColorA

    var string "1.0" terminalAccentColorR
    var string "1.0" terminalAccentColorG
    var string "1.0" terminalAccentColorB
    var string "1.0" terminalAccentColorA

    var int 0 commandNumber
    var int 0 currentCommandNumber
    vec string [""] commandHistory

    vec string [help neofetch hello ls sq cats sh fullscreen fs nw note mover spawn 222 cls cat print exit edit sand cd pwd reboot history forgor sel_col xd] allowedPrograms

    var string "scripts" dir
    run loadCommandHistory
end



start loadCommandHistory
    string ["history.txt"] fileName
    load_text fileName loadedText
    tokenize "\n" loadedText loadedText
    fun commandHistory clear
    fun commandHistory push_back c loadedText
    value ([c commandHistory size]) newSize
    -- newSize
    = commandNumber newSize
    = currentCommandNumber newSize
end


/*start spawnParticles
    triggers key_pressing
    if ([any_key_pressing])
    index c me [0 0] _ particles Particles
    index c me [0 0] _ super_editable_text Terminal
    value ([c Terminal pos_x] [c Terminal pos_y]) textPos
    fun Particles set_position c textPos
    fun Particles allow_spawning
end*/


start createWindowTemplate
    new layer l 1 _ _ WindowLayer
    fun WindowLayer deactivate
    fun WindowLayer set_id string [WindowLayer]
    value ([context WindowLayer id]) newLayerID

    new camera l 1 _ _ WindowCamera
    fun WindowCamera set_position int [0 0]
    fun WindowCamera set_id string [WindowCamera]
    fun WindowCamera set_active bool [true]
    fun WindowCamera resize int [640 480]
    fun WindowCamera set_zoom double [1.0]
    fun WindowCamera set_speed double [20]
    fun WindowCamera set_key_zoom_in int [15]
    fun WindowCamera set_key_zoom_out int [21]
    fun WindowCamera set_zoom_increase double [0.02]
    fun WindowCamera bind_keys int [15 21 13 9 12 11 10]
    fun WindowCamera set_tint double [1.0 1.0 1.0 1.0]
    fun WindowCamera set_drawing_borders bool [0]
    fun WindowCamera set_can_be_modified_by_mouse bool [1]
    fun WindowCamera set_is_vision_affected_by_mouse bool [1]
    //fun WindowCamera add_visible_layer string [WindowLayer]
    //fun WindowCamera add_accessible_layer string [WindowLayer]
    fun WindowCamera set_grabbing_area_size int [540 50]
    fun WindowCamera pin_to_camera string [Desktop]
    fun WindowCamera activate_pin
    fun WindowCamera set_min_size int [300 34]
    fun WindowCamera set_keep_inside_screen bool [false]
    fun WindowCamera deactivate

    new object c WindowLayer 1 _ _ NewWindowObject
    fun NewWindowObject set_id string [WindowObject]
    fun NewWindowObject set_can_be_selected bool [true]
    fun NewWindowObject add_to_the_interface
    fun NewWindowObject set_can_be_moved_with_mouse bool [false]
    bind NewWindowObject literal ["scripts/windowTemplate.sand"]
    build NewWindowObject true

    new variable c NewWindowObject 1 _ _ objectsCameraID
    fun objectsCameraID set_id string ["cameraID"]
    fun objectsCameraID set_string string ["WindowCamera"]

    new variable c NewWindowObject 1 _ _ isMaxed
    fun isMaxed set_id string ["isMaxed"]
    fun isMaxed set_bool bool [false]
    new variable c NewWindowObject 1 _ _ sizeX
    fun sizeX set_id string ["sizeX"]
    fun sizeX set_double double [640]
    new variable c NewWindowObject 1 _ _ sizeY
    fun sizeY set_id string ["sizeY"]
    fun sizeY set_double double [480]
    new variable c NewWindowObject 1 _ _ posX
    fun posX set_id string ["posX"]
    fun posX set_double double [0]
    new variable c NewWindowObject 1 _ _ posY
    fun posY set_id string ["posY"]
    fun posY set_double double [0]
    new variable c NewWindowObject 1 _ _ isBorderless
    fun isBorderless set_id string ["isBorderless"]
    fun isBorderless set_bool bool [false]

    new variable c NewWindowObject 1 _ _ newVal
    fun newVal set_id string ["delete"]
    fun newVal set_bool bool [false]

    new variable c NewWindowObject 1 _ _ newVal
    fun newVal set_id string ["has_friends"]
    fun newVal set_bool bool [false]

    new variable c NewWindowObject 1 _ _ newVal
    fun newVal set_id string ["deleted_friends"]
    fun newVal set_bool bool [false]

    new primitives c NewWindowObject 1 _ _ border1
    fun border1 set_id string [background]
    fun border1 set_type string [filled_rectangle]
    fun border1 add_point double [0.0 0.0]
    fun border1 add_point double [640 480]
    fun border1 set_color double [1.0 1.0 1.0 0.7]
    fun border1 set_size int [640 480]
    fun border1 update_with_size

    new primitives c NewWindowObject 1 _ _ border2
    clone border2 border1
    fun border2 set_id string [toolbar]
    fun border2 set_color double [0.109 0.537 0.2039 1.0]
    fun border2 set_size int [640 30]
    fun border2 update_with_size

    new primitives c NewWindowObject 1 _ _ border3
    clone border3 border1
    fun border3 set_id string [border]
    fun border3 set_type string [rectangle]
    fun border3 set_color double [0.109 0.537 0.2039 1.0]
    fun border3 set_position int [2 2]
    fun border3 set_size int [636 476]
    fun border3 set_thickness double [5.0]
    fun border3 update_with_size

    new primitives c NewWindowObject 1 _ _ exitButton
    fun exitButton set_id string [exitButton]
    fun exitButton set_type string [filled_circle]
    fun exitButton add_point double [0.0 0.0]
    fun exitButton add_point double [5 5]
    fun exitButton set_color double [1.0 0.0 0.0 1.0]
    fun exitButton set_position int [620 15]
    fun exitButton set_size int [20 20]
    fun exitButton update_with_size

    new collision c NewWindowObject 1 _ _ ExitCollision
    fun ExitCollision set_position double [620 15]
    fun ExitCollision set_size double [10 10]
    fun ExitCollision set_is_circle bool [true]

    new primitives c NewWindowObject 1 _ _ MaxButton
    clone MaxButton exitButton
    fun MaxButton set_id string [MaxButton]
    fun MaxButton set_position int [590 15]
    fun MaxButton set_color double [1.0 1.0 0.0 1.0]

    new collision c NewWindowObject 1 _ _ MaxCollision
    fun MaxCollision set_position double [590 15]
    fun MaxCollision set_size double [10 10]
    fun MaxCollision set_is_circle bool [true]

    new primitives c NewWindowObject 1 _ _ minimizeButton
    clone minimizeButton exitButton
    fun minimizeButton set_id string [minimizeButton]
    fun minimizeButton set_position int [560 15]
    fun minimizeButton set_color double [0.0 1.0 0.0 1.0]

    new collision c NewWindowObject 1 _ _ MinCollision
    fun MinCollision set_position double [560 15]
    fun MinCollision set_size double [10 10]
    fun MinCollision set_is_circle bool [true]

    new super_text c NewWindowObject 1 _ _ title
    fun title set_id string [title]
    fun title set_position int [10 2]
    fun title set_size int [400 50]
    fun title add_format string [cascadia_code_bold] int [8]
    fun title set_color int [0] double [1.0 1.0 1.0 1.0]
    fun title set_wrapping string [n]
    fun title set_content s ["Template Window"]
end


start nw
    run spawnNewWindow
end


start spawnNewWindow
    all camera _ camera _ Cameras
    string ["WindowCamera"] cameraID
    find_by_id_2 Cameras cameraID TemplateCamera
    all layer _ _ _ _ _ _ Layers
    string ["WindowLayer"] layerID
    find_by_id_2 Layers layerID TemplateLayer

    new layer l 1 _ _ NewWindowLayer
    clone NewWindowLayer TemplateLayer
    fun NewWindowLayer set_id c param1
    value ([context NewWindowLayer id]) newLayerID
    fun NewWindowLayer activate

    index c NewWindowLayer [0 0 0] _ super_text Title
    fun Title set_content c param1

    new camera l 1 _ _ NewWindowCamera
    clone NewWindowCamera TemplateCamera
    fun NewWindowCamera set_id c param1
    value ([context NewWindowCamera id]) newCameraID
    fun NewWindowCamera activate
    fun NewWindowCamera add_visible_layer c newLayerID
    fun NewWindowCamera add_accessible_layer c newLayerID
    fun NewWindowCamera set_drawing_borders bool [false]
    index c NewWindowLayer [0 0 0] _ variable objectsCameraID
    = objectsCameraID newCameraID
    string [""] program
end


start note
    int [0] NewWindowLayer
    //dump_context_stack
    string [""] fileName
    = fileName param1
    string ["Note"] param1
    run spawnNewWindow spawnNotepad
end


start spawnNotepad
    index c me [0 1] _ super_editable_text Editable
    index c NewWindowLayer [0 0] _ object Object
    index c NewWindowLayer [0 0 0] _ primitives Background
    fun Background set_color double [0.0 0.0 0.0 1.0]
    new super_editable_text c Object 1 _ _ TextEditor
    clone TextEditor Editable
    fun TextEditor set_id string ["Notepad"]
    fun TextEditor set_position int [5 30]
    fun TextEditor set_size int [640 480]
    fun TextEditor set_color int [0] double [1.0 0.0 0.0 1.0]
    fun TextEditor set_wrapping string [n]
    fun TextEditor set_content string [""]
    fun TextEditor activate
    fun Object set_size int [640 480]
    bind Object literal ["scripts/notepad.sand"]
    build Object true
    run loadTextFromFile
end


start mover
    int [0] NewWindowLayer
    string [""] selectedLayerID
    = selectedLayerID param1
    string ["Mover"] param1
    int [0] NewWindowCamera
    run spawnNewWindow spawnMover
end


start spawnMover
    index c me [0 1] _ super_editable_text Editable
    index c NewWindowLayer [0 0] _ object NewObject
    first context [NewObject] _ _ variable has_friends bool _ has_friends
    bool [true] true
    = has_friends true
    find_by_id_2 NewObject has_friends 
    index c NewWindowLayer [0 0 0] _ primitives Background
    fun Background set_color double [0.0 0.0 0.0 1.0]
    //value ([context my_layer id]) selectedLayerID
    value ([context NewWindowCamera id]) windowCameraID
    //dump_context_stack
    new camera l 1 _ _ InsideCamera
    fun InsideCamera activate
    fun InsideCamera add_visible_layer c selectedLayerID
    fun InsideCamera add_accessible_layer c selectedLayerID
    fun InsideCamera pin_to_camera c windowCameraID
    fun InsideCamera activate_pin
    fun InsideCamera set_relative_position int [5 30]
    fun InsideCamera resize int [630 440]
    fun InsideCamera set_can_move_objects bool [true]
    fun InsideCamera set_can_edit_text bool [false]
    fun InsideCamera set_id string ["insideCamera"]
    fun InsideCamera set_min_size int [0 0]

    value ([c InsideCamera id]) newCameraID

    new variable c NewObject 1 _ _ cameraID
    fun cameraID set_id string ["insideCameraID"]
    fun cameraID set_string c newCameraID

    bind NewObject literal ["scripts/mover.sand"]
    build NewObject false
end


start interrupt
    triggers key_pressed
    if ([key_pressed 215] [key_pressed 3] &&) //217-ctrl, 215-shift, 3-c
    string ["_enter"] program
end

start autoComplete
    triggers key_pressed
    if ([key_pressed 64] [context program] [string "sleep"] == &&)
    index camera [0] _ camera Camera
    run autoComplete1
end

start autoComplete1
    if ([c Camera is_focused])
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    first _ [EditableText] _ _ _ _ content _ userInput
    first _ [EditableText] _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    similar command allowedPrograms completes
    string ["\n"] result
    //+= result completes
    value ([c completes size]) size
    int [0] i
    run replaceWithAutoComplete
end

start replaceWithAutoComplete
    if ([c completes size] [int 1] ==)
    fun EditableText cut_unprotected_area
    index context completes [0] _ value instance
    fun EditableText add_content context instance
    fun EditableText update
    first _ [EditableText] _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos c historySize
    else printPossibleCompletes
end

start createPrompt
    string ["┌/"] begin
    += result begin
    pwd workingDir
    += result workingDir
    string ["\n└─$ "] secondLine
    += result secondLine
end

start putNewLine
    string ["\n"] newLine
    += result newLine
end

start printPossibleCompletes
    run addAllCompletes putNewLine createPrompt printOnTerminal rewriteLastCommand
end

start addAllCompletes true
    if ([c i] [c completes size] <)
    index context completes _ [i] value instance
    += result instance
    string [" "] space
    += result space
    ++ i
end

start rewriteLastCommand
    index layer [0 1] _ object Terminal
    fun EditableText add_content context command
    fun EditableText update
    first _ [EditableText] _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos c historySize
end


start controler
    triggers each_iteration
    if ([context program] [string ""] ==)
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    fun EditableText set_last_color c terminalColorR c terminalColorG c terminalColorB c terminalColorA
    fun EditableText set_last_accent_color c terminalAccentColorR c terminalAccentColorG c terminalAccentColorB c terminalAccentColorA
    string ["sleep"] program
    string [""] result
    run createPrompt printOnTerminal
end


start clearOnShortcut
    triggers key_pressed
    if ([context program] [string "sleep"] == [key_pressed 217] && [key_pressed 12] &&)
    run cls
end



start controlerWithEnter
    triggers each_iteration
    if ([context program] [string "_enter"] ==)
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    fun EditableText set_last_color c terminalColorR c terminalColorG c terminalColorB c terminalColorA
    fun EditableText set_last_accent_color c terminalAccentColorR c terminalAccentColorG c terminalAccentColorB c terminalAccentColorA
    string ["sleep"] program
    string ["\n"] result
    run createPrompt printOnTerminal
end



start fs_click false
    triggers key_pressed
    if ([key_pressed 58])
    run setFullscreen
end

start fullscreen
    string [""] program
    run setFullscreen
end

start fs
    string [""] program
    run setFullscreen
end

start setFullscreen
    if ([fullscreen] !)
    env fullscreen 1
    else fs_else
end

start fs_else
    env fullscreen 0
end

start refresh
    triggers on_display_resize
    if([on_display_resize])
    value ([window_w]) w
    value ([window_h]) h
    index camera [0] _ camera Cam0
    fun Cam0 resize c w c h
    index context me [0 0] _ image background
    fun background resize c w c h

    index c me [0 1] _ super_editable_text EditProgramTextField
    fun EditProgramTextField set_size c w c h
    index c me [0 0] _ super_editable_text TerminalTextField
    value ([c TerminalTextField size_y]) TerminalSizeY
    fun TerminalTextField set_size c w c TerminalSizeY
    fun TerminalTextField update
    fun TerminalTextField crop_height_to_text
    run refreshScrollbar
end


start refreshScrollbar
    index c me [0 0] _ super_editable_text TerminalTextField
    value ([c TerminalTextField size_y]) TerminalSizeY
    value ([window_h]) h
    -= TerminalSizeY h
    run refreshScrollbarCheck
end

start refreshScrollbarCheck
    if([c TerminalSizeY] [int 0] >)
    index c me [0 0] _ scrollbar MainScrollbar
    int [0] 0
    fun MainScrollbar set_real_scrolling_area c 0 c TerminalSizeY
    int [26] 26
    double [476] sizeY
    double [250] divide
    /= divide TerminalSizeY
    *= sizeY divide
    fun MainScrollbar set_thumb_size c 26 c sizeY
    fun me update_scrollbars
    else resetScrollbar
end

start resetScrollbar
    index c me [0 0] _ scrollbar MainScrollbar
    int [26] 26
    double [476] sizeY
    fun MainScrollbar set_thumb_size c 26 c sizeY
    fun me update_scrollbars
end


start enter
    triggers key_pressed
    if ([key_pressed 67] [context program] [string "sleep"] == &&)
    index camera [0] _ camera Camera
    run enter1
end


start enter1
    if ([c Camera is_focused])
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    first _ [EditableText] _ _ _ _ content _ userInput
    first _ [EditableText] _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command

    len command commandLength

    string [""] param0
    string [""] param1
    string [""] param2
    string [""] param3
    string [""] param4
    string [""] param5
    string [""] param6
    string [""] param7

    tokenize " " command param0 param1 param2 param3 param4 param5 param6 param7

    in param0 allowedPrograms isAllowed
    string ["_enter"] program
    run saveCommand programCheck
end


start reboot
    reboot
end


start saveCommand
    if ([c commandLength] [int 0] >)
    fun commandHistory set c commandNumber c command
    string ["~/history.txt"] fileName
    save_text fileName commandHistory
    fun commandHistory push_back string [""]
    ++ commandNumber
    = currentCommandNumber commandNumber
end

start forgor
    int [0] zero
    = commandNumber zero
    = currentCommandNumber zero
    fun commandHistory clear
    string ["history.txt"] fileName
    save_text fileName commandHistory
    string [""] emptyString
    fun commandHistory push_back c emptyString
    string [""] program
end

start moveInHistory
    triggers key_pressed
    index camera [0] _ camera Camera
    run upArrow downArrow
end

start upArrow
    if ([c Camera is_focused] [key_pressed 84] [c program] [string "sleep"] == [c currentCommandNumber] [int 0] > && && &&)
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    first _ [EditableText] _ _ _ _ content _ userInput
    first _ [EditableText] _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    fun commandHistory set c currentCommandNumber c command

    -- currentCommandNumber

    fun EditableText cut_unprotected_area
    value ([v commandHistory c currentCommandNumber]) diffCommand
    fun EditableText add_content context diffCommand
    fun EditableText update
    first _ [EditableText] _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos c historySize
end


start downArrow
    if ([c Camera is_focused] [key_pressed 85] [c program] [string "sleep"] == [c currentCommandNumber] [c commandNumber] < && && &&)
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    first _ [EditableText] _ _ _ _ content _ userInput
    first _ [EditableText] _ _ _ _ protected_area _ protectedArea
    len userInput userInputSize
    substr userInput protectedArea userInputSize command
    fun commandHistory set c currentCommandNumber c command

    ++ currentCommandNumber

    fun EditableText cut_unprotected_area
    value ([v commandHistory c currentCommandNumber]) diffCommand
    fun EditableText add_content context diffCommand
    fun EditableText update
    first _ [EditableText] _ _ _ _ content _ history
    len history historySize
    fun EditableText set_cursor_pos c historySize
end


start programCheck
    if ([context isAllowed])
    string ["run "] run
    += run param0
    string ["run"] program
    inject_instr me run
    string ["\n"] result
    run printOnTerminal
    else programNotFound
end

start programNotFound
    if ([context param0] [string ""] !=)
    string ["\nCommand not found!"] result
    run printOnTerminal
end


start printOnTerminal
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    fun EditableText add_content context result
    fun EditableText update
    fun EditableText crop_height_to_text
    first _ [EditableText] _ _ _ _ content _ history
    len history historySize
    fun EditableText set_protected_area c historySize
    fun EditableText set_cursor_pos c historySize
    run refreshScrollbar
end



start edit
    string ["edit"] program
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text TerminalTextField
    fun TerminalTextField deactivate
    index context Terminal [0 1] _ super_editable_text TextEditor
    fun TextEditor set_content string [""]
    fun TextEditor set_cursor_pos int [0]
    fun TextEditor activate
    string [""] fileName
    = fileName param1
    run loadTextFromFile
end

start loadTextFromFile
    if ([exists fileName])
    load_text fileName loadedText
    fun TextEditor set_content c loadedText
    len loadedText loadedTextSize
    fun TextEditor set_cursor_pos c loadedTextSize
end

start textEditorInsert
    triggers key_pressed
    if([context program] [string "edit"] == [key_pressed 217] && [key_pressed 9] &&)
    first layer KERNEL KERNEL super_editable_text TextEditor is_editing_active _ isEditing
    run checkIfInsertPressed
end

start checkIfInsertPressed
    if([context isEditing] !)
    reset_keyboard
    index layer [0 1] _ object Terminal
    index context Terminal [0 1] _ super_editable_text EditableText
    fun EditableText start_editing
end

start textEditorExit
    triggers key_pressed
    if([context program] [string "edit"] == [key_pressed 217] && [key_pressed 17] &&)
    string [""] program
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text TerminalTextField
    fun TerminalTextField activate
    fun TerminalTextField start_editing
    index context Terminal [0 1] _ super_editable_text TextEditor
    fun TextEditor deactivate
    fun TextEditor stop_editing
end

start textEditorSave
    triggers key_pressed
    if([context program] [string "edit"] == [key_pressed 217] && [key_pressed 19] &&)
    index layer [0 1] _ object Terminal
    index context Terminal [0 1] _ super_editable_text TextEditor
    first _ [TextEditor] _ _ _ _ content _ writtenText
    save_text param1 writtenText
end

start sand
    load_build me param1
    string [""] program
end


start injectFormat
    print ":" _ c startFragment
    print \n _ c endFragment
    index layer [0 1] _ object Terminal
    index context Terminal [0 0] _ super_editable_text EditableText
    double [1.0] r
    double [0.0] g
    double [1.0] b
    double [1.0] a
    string [cascadia_code] font 
    fun EditableText inject_format c startFragment c endFragment c r c g c b c a c r c g c b c a c font
end

start format
    triggers key_pressed
    if([key_pressed 217] && [key_pressed 5] &&)
    index layer [0 1] _ object TerminalObject
    index context TerminalObject [0 0] _ super_editable_text Terminal
    value ([c Terminal cursor_pos]) cursorPos
    value ([c Terminal second_cursor_pos]) secondCursorPos
    run formatCheck
end 

start formatCheck
    if ([c cursorPos] [c secondCursorPos] <)
    else formatElseCheck
    int [0] startFragment
    int [0] endFragment
    = startFragment cursorPos
    = endFragment secondCursorPos
    run injectFormat
end

start formatElseCheck
    int [0] startFragment
    int [0] endFragment
    = startFragment secondCursorPos
    = endFragment cursorPos
    run injectFormat
end

/*start lol
    triggers each_iteration
    string ["xd"] param1
    run edit
    post
    delete_this_event
end*/
